package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SearchView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;

import java.security.cert.CollectionCertStoreParameters;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Locale;

public class SearchDevices extends AppCompatActivity implements SearchDeviceAdapter.OnItemListener {

    private DatabaseReference UserEntryDatabase;
    SearchDeviceAdapter searchDeviceAdapter;
    ArrayList<SearchDeviceData> list;
    ArrayList<SearchDeviceData> searchedList;
    RecyclerView recyclerView;
    SearchView searchView;
    RadioGroup radioGroup;
    RadioButton radioButton;
    Context context = this;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search_devices);

//        searchDeviceAdapter = new SearchDeviceAdapter(context, list, this);

        FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");
        UserEntryDatabase = database.getReference("User_Entry");

        recyclerView = findViewById(R.id.deviceRecycleView);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(context));

        searchView = findViewById(R.id.deviceSearchView);

        radioGroup = findViewById(R.id.radioGroup);

        list = new ArrayList<>();

        //item adapter
//        searchDeviceAdapter = new SearchDeviceAdapter(context, list, this);
//        recyclerView.setAdapter(searchDeviceAdapter);

    }

    @Override

    protected void onStart() {
        super.onStart();

        //get all the data of User Entries.
        if (UserEntryDatabase != null) {
            UserEntryDatabase.addValueEventListener(new ValueEventListener() {

                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    if (snapshot.exists()) {

                        list = new ArrayList<>();

                        for (DataSnapshot ds : snapshot.getChildren()) {

//                            String brand = ds.child("brand").getValue(String.class);
                            String userSubmissionID = ds.getKey();
                            String manufacturer = ds.child("manufacturer").getValue(String.class);
                            String model = ds.child("model").getValue(String.class);

                            String manufacturerdmodel = manufacturer + " " + model;
                            String androidversion = ds.child("release").getValue(String.class);
                            String chipset = ds.child("chipset").getValue(String.class);

                            String socmodel = ds.child("socmodel").getValue(String.class);
                            String socmanufacturer = ds.child("socmanufacturer").getValue(String.class);

                            String socmanufacturermodel = socmodel + ", " + socmanufacturer;

                            if (chipset.equals("unknown")){chipset = socmanufacturermodel;}

                            String dateofscan = ds.child("date").getValue(String.class);

                            //default to 0 first. Will add up in the next part.
                            String vulnerabilityCount = "0";

                            //not all will have vulnerabilities as such default as 0 above.
                            DataSnapshot Branch = ds.child("vulnerabilities");

                            vulnerabilityCount = String.valueOf(Branch.getChildrenCount());

                            list.add(new SearchDeviceData(userSubmissionID, manufacturerdmodel, androidversion, chipset, dateofscan, vulnerabilityCount));

                        }

                        //fill up the searched array with values by searching something.
                        String searchText = "";
                        search(searchText);

                    }

                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {
                    Log.d("SearchDevices", "DATABASE ERROR", error.toException());
                }
            });

        }


        if (searchView != null) {

            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                @Override
                public boolean onQueryTextSubmit(String searchText) {
                    return false;
                }

                @Override
                public boolean onQueryTextChange(String searchText) {

                    //searchText can never be null at the start to prevent errors
                    if (searchText.equals(null)){
                    searchText = "";
                    }

                    search(searchText);
                    return true;
                }
            });
        }

    }

    @Override
    public void onItemClick(int position) {

        String userSubmissionID = searchedList.get(position).getuserSubmissionID();

        Log.d("onItemClick", userSubmissionID);

        Intent intent = new Intent(context, SearchDeviceResult.class);
        intent.putExtra("userSubmissionID", userSubmissionID);
        startActivity(intent);

    }



    private void search(String searchText) {

        Log.v("SEARCHFUNCTION:", "called");

        searchedList = new ArrayList<>();

        for (int i = 0; i < list.size(); i++) {

            String manufacturermodel = list.get(i).getManufacturerModel();

            if (manufacturermodel != null) {
                Log.d("manufacturermodel", manufacturermodel);

                if (manufacturermodel.toLowerCase().contains(searchText.toLowerCase())) {
                    searchedList.add(list.get(i));

                    Log.d("myListSize", String.valueOf(searchedList.size()));
                }

            } else {
                Log.d("brandmodelname", "empty");
            }


        }

        searchDeviceAdapter = new SearchDeviceAdapter(context, searchedList, this);
        recyclerView.setAdapter(searchDeviceAdapter);
        searchDeviceAdapter.notifyDataSetChanged();

        //method repeated here instead of being called such that when user is typing a keyword,
        //the sort is called again after they type the word so that the sort function applies no matter what

        int radioId = radioGroup.getCheckedRadioButtonId();
        radioButton = findViewById(radioId);
        String radioButtonText = (String) radioButton.getText();

        Log.d("radioButtonText", radioButtonText);

        sortArrayList(radioButtonText);

    }

    public void checkButton(View view) {

        int radioId = radioGroup.getCheckedRadioButtonId();
        radioButton = findViewById(radioId);
        String radioButtonText = (String) radioButton.getText();

        Log.d("radioButtonText", radioButtonText);

        sortArrayList(radioButtonText);

    }


    private void sortArrayList(String radioButtonText) {

        if (searchedList == null) {
            search("");
        }

        if (radioButtonText.equals("A-Z")) {
            Collections.sort(searchedList, new Comparator<SearchDeviceData>() {
                @Override
                public int compare(SearchDeviceData searchDeviceData, SearchDeviceData t1) {
                    return searchDeviceData.getManufacturerModel().compareTo(t1.getManufacturerModel());
                }
            });

            searchDeviceAdapter.notifyDataSetChanged();

        }

        if (radioButtonText.equals("Z-A")) {
            Collections.sort(searchedList, new Comparator<SearchDeviceData>() {
                @Override
                public int compare(SearchDeviceData searchDeviceData, SearchDeviceData t1) {
                    return t1.getManufacturerModel().compareTo(searchDeviceData.getManufacturerModel());
                }
            });

            searchDeviceAdapter.notifyDataSetChanged();

        }


        if (radioButtonText.equals("Newest First")) {
            Collections.sort(searchedList, new Comparator<SearchDeviceData>() {
                @Override

                public int compare(SearchDeviceData searchDeviceData, SearchDeviceData t1) {
                    String date1 = searchDeviceData.getDate();

                    //call function to convert alphabetical date to numeric date
                    date1 = dateconverter(date1);

                    String date2 = t1.getDate();
                    date2 = dateconverter(date2);

                    return date2.compareTo(date1);
                }
            });



            searchDeviceAdapter.notifyDataSetChanged();

        }

        if (radioButtonText.equals("Oldest First")) {
            Collections.sort(searchedList, new Comparator<SearchDeviceData>() {
                @Override
                public int compare(SearchDeviceData searchDeviceData, SearchDeviceData t1) {

                    String date1 = searchDeviceData.getDate();

                    //call function to convert alphabetical date to numeric date
                    date1 = dateconverter(date1);

                    String date2 = t1.getDate();
                    date2 = dateconverter(date2);

                    return date1.compareTo(date2);
                }
            });

            searchDeviceAdapter.notifyDataSetChanged();

        }



    }

    public String dateconverter(String date) {

        String datetime = date.substring(11,13) + date.substring(14,16) + date.substring(17,19);
        String datedate = date.substring(8,10);
        String datemonth = date.substring(4,7).toLowerCase();
        String dateyear = date.substring(date.length() -4);

        if (datemonth.equals("jan")) {
            datemonth = "01";

        } else if (datemonth.equals("feb")) {
            datemonth = "02";

        } else if (datemonth.equals("mar")) {
            datemonth = "03";

        } else if (datemonth.equals("april")) {
            datemonth = "04";

        } else if (datemonth.equals("may")) {
            datemonth = "05";

        } else if (datemonth.equals("june")) {
            datemonth = "06";

        } else if (datemonth.equals("july")) {
            datemonth = "07";

        } else if (datemonth.equals("aug")) {
            datemonth = "08";

        } else if (datemonth.equals("sep")) {
            datemonth = "09";

        } else if (datemonth.equals("oct")) {
            datemonth = "10";

        } else if (datemonth.equals("nov")) {
            datemonth = "11";

        } else if (datemonth.equals("dec")) {
            datemonth = "12";

        } else {
            datemonth = "error";
        }

        String datenumeric = dateyear+datemonth+datedate+datetime;

        return datenumeric;
    }
}





