package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SearchView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Locale;

public class SearchDevices extends AppCompatActivity {

    private DatabaseReference UserEntryDatabase;
    ArrayList<SearchDeviceData> list;
    ArrayList<SearchDeviceData> searchedList;
    RecyclerView recyclerView;
    SearchView searchView;
    SearchDeviceAdapter searchDeviceAdapter;
    RadioGroup radioGroup;
    RadioButton radioButton;
    Context context = this;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search_devices);

        FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");
        UserEntryDatabase = database.getReference("User Entry");

        recyclerView = findViewById(R.id.deviceRecycleView);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(context));

        searchView = findViewById(R.id.deviceSearchView);

        radioGroup = findViewById(R.id.radioGroup);


    }


    @Override

    protected void onStart() {
        super.onStart();

        //get all the data of User Entries.
        if (UserEntryDatabase != null) {
            UserEntryDatabase.addValueEventListener(new ValueEventListener() {

                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    if (snapshot.exists()) {

                        list = new ArrayList<>();

                        for (DataSnapshot ds : snapshot.getChildren()) {

//                            String brand = ds.child("brand").getValue(String.class);
                            String manufacturer = ds.child("manufacturer").getValue(String.class);
                            String model = ds.child("model").getValue(String.class);

                            String manufacturerdmodel = manufacturer + " " + model;
                            String androidversion = ds.child("release").getValue(String.class);
                            String chipset = ds.child("chipset").getValue(String.class);
                            String dateofscan = ds.child("date").getValue(String.class);

                            //default to 0 first. Will add up in the next part
                            String vulnerabilityCount = "0";

                            DataSnapshot Branch = ds.child("vulnerabilities");

                            vulnerabilityCount = String.valueOf(Branch.getChildrenCount());

                            list.add(new SearchDeviceData(manufacturerdmodel, androidversion, chipset, dateofscan, vulnerabilityCount));

                        }

                        Log.d("SearchDeviceDataLength", String.valueOf(list.size()));

                        searchDeviceAdapter = new SearchDeviceAdapter(context, list);
                        recyclerView.setAdapter(searchDeviceAdapter);
                        searchDeviceAdapter.notifyDataSetChanged();
                    }

                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {
                    Log.d("SearchDevices", "DATABASE ERROR", error.toException());
                }
            });
        }

        if (searchView != null) {
            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                @Override
                public boolean onQueryTextSubmit(String searchText) {
                    return false;
                }

                @Override
                public boolean onQueryTextChange(String searchText) {

                    //searchText can never be null at the start to prevent errors


                    search(searchText);
                    return true;
                }
            });
        }

    }

    private void search(String searchText) {

        searchedList = new ArrayList<>();

        for (int i = 0; i < list.size(); i++) {

            String manufacturermodel = list.get(i).getManufacturerModel();

            if (manufacturermodel != null) {
                Log.d("manufacturermodel", manufacturermodel);

                if (manufacturermodel.toLowerCase().contains(searchText.toLowerCase())) {
                    searchedList.add(list.get(i));

                    Log.d("myListSize", String.valueOf(searchedList.size()));
                }

            } else {
                Log.d("brandmodelname", "empty");
            }


        }

        searchDeviceAdapter = new SearchDeviceAdapter(context, searchedList);
        recyclerView.setAdapter(searchDeviceAdapter);
        searchDeviceAdapter.notifyDataSetChanged();

        //method repeated here instead of being called such that when user is typing a keyword,
        //the sort is called again after they type the word so that the sort function applies no matter what

        int radioId = radioGroup.getCheckedRadioButtonId();
        radioButton = findViewById(radioId);
        String radioButtonText = (String) radioButton.getText();

        Log.d("radioButtonText", radioButtonText);

        sortArrayList(radioButtonText);

    }

    public void checkButton(View view) {

        int radioId = radioGroup.getCheckedRadioButtonId();
        radioButton = findViewById(radioId);
        String radioButtonText = (String) radioButton.getText();

        Log.d("radioButtonText", radioButtonText);

        sortArrayList(radioButtonText);

    }


    private void sortArrayList(String radioButtonText) {

        if (searchedList == null) {
            search("");
        }


        if (radioButtonText.equals("A-Z")) {
            Collections.sort(searchedList, new Comparator<SearchDeviceData>() {
                @Override
                public int compare(SearchDeviceData searchDeviceData, SearchDeviceData t1) {
                    return searchDeviceData.getManufacturerModel().compareTo(t1.getManufacturerModel());
                }
            });

            searchDeviceAdapter.notifyDataSetChanged();

        }

        if (radioButtonText.equals("Z-A")) {
            Collections.sort(searchedList, new Comparator<SearchDeviceData>() {
                @Override
                public int compare(SearchDeviceData searchDeviceData, SearchDeviceData t1) {
                    return t1.getManufacturerModel().compareTo(searchDeviceData.getManufacturerModel());
                }
            });

            searchDeviceAdapter.notifyDataSetChanged();

        }


        if (radioButtonText.equals("Newest First")) {
            Collections.sort(searchedList, new Comparator<SearchDeviceData>() {
                @Override
                public int compare(SearchDeviceData searchDeviceData, SearchDeviceData t1) {
                    return searchDeviceData.getDate().compareTo(t1.getManufacturerModel());
                }
            });

            searchDeviceAdapter.notifyDataSetChanged();

        }

        if (radioButtonText.equals("Oldest First")) {
            Collections.sort(searchedList, new Comparator<SearchDeviceData>() {
                @Override
                public int compare(SearchDeviceData searchDeviceData, SearchDeviceData t1) {
                    return t1.getManufacturerModel().compareTo(searchDeviceData.getManufacturerModel());
                }
            });

            searchDeviceAdapter.notifyDataSetChanged();

        }
    }
}





