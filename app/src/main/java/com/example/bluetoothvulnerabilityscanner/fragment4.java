package com.example.bluetoothvulnerabilityscanner;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;


public class fragment4 extends Fragment implements AdapterCve.OnItemListener {


    View root;
    Context thiscontext;
    RecyclerView recyclerView;
    TextView resultTitle;
    TextView resultQuantityTitle;
    TextView dateTitle;
    TextView vulnerabilitiesTitle;
    TextView scoreTitle;

    AdapterCve adapterCve;
    ArrayList<DataCve> list;
    ArrayList<String> cveListID;

    FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");
    private DatabaseReference UserEntryDatabase;
    private DatabaseReference CVEDatabase;
    private SearchDeviceResult activity;
    public String userSubmissionID;
    public String VulnerabilitiesClick;
    public String BaseScoreClick;

    private static final String TAG = "fragment4";

    public fragment4() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        activity = (SearchDeviceResult) getActivity();
        userSubmissionID = activity.getUserSubmissionID();
        Log.v("userSubmissionIDfrag4", userSubmissionID);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        root = inflater.inflate(R.layout.fragment_fragment4, container, false);

        //getting information from ScanDevice activity
        activity = (SearchDeviceResult) getActivity();

        thiscontext = container.getContext();

        recyclerView = root.findViewById(R.id.cveList);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(thiscontext));


        resultTitle = root.findViewById(R.id.resultTitle);
        resultQuantityTitle = root.findViewById(R.id.resultQuantityTitle);
        dateTitle = root.findViewById(R.id.dateTitle);
        vulnerabilitiesTitle = root.findViewById(R.id.vulnerabilitiesTitle);
        scoreTitle = root.findViewById(R.id.scoreTitle);

        //array lists we are going to use
        list = new ArrayList<>();


        //item adapter
        adapterCve = new AdapterCve(thiscontext, list, this);
        recyclerView.setAdapter(adapterCve);

        //database references
        UserEntryDatabase = database.getReference("User_Entry");

        getUserSubmissionInfo(userSubmissionID);

        VulnerabilitiesClick = "A-Z";
        BaseScoreClick = "High-Low";

        return root;
    }


    @Override
    public void onItemClick(int position) {

        String cveName = list.get(position).getCveName();
        String cveID = list.get(position).getcveID();

        Log.d("onItemClick", cveName);

        Intent intent = new Intent(thiscontext, CveInfo.class);
        intent.putExtra("cveName", cveName);
        intent.putExtra("cveID", cveID);
        startActivity(intent);

    }

    public void getUserSubmissionInfo(String userSubmissionID) {

        Log.v(TAG, "getUserSubmissionInfo: function run");

        DatabaseReference userEntryPath = database.getReference("User_Entry/" + userSubmissionID);
        DatabaseReference userEntryVulnerabilityPath = database.getReference("User_Entry/" + userSubmissionID + "/vulnerabilities");

        cveListID = new ArrayList<String>();

        userEntryPath.addListenerForSingleValueEvent(new ValueEventListener() {

            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                if (snapshot.exists()) {
                    Log.v(TAG, "userEntryPath: snapshot exist"); //displays the key for the node

                    for (DataSnapshot ds : snapshot.getChildren()) {

                        String key = ds.getKey();

                        Class type = ds.getValue().getClass();

                        if (type == String.class) {

                            String value = ds.getValue(String.class);

                            Log.v(TAG, "frag4key: " + key); //displays the key for the node

                            //only allow string types. Vulnerability branch is considered an array list!
                            if (type == String.class) {

                                String date;

                                if (key.equals("date")) {
                                    date = value;
                                    Log.v(TAG, "frag4date: " + date);

                                    //set Scan Date
                                    dateTitle.setText("Date Scanned: " + date);
                                }


                            }
                        }

                    }

                }

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.d(TAG, "DATABASE ERROR", error.toException());
            }
        });

        userEntryVulnerabilityPath.addListenerForSingleValueEvent(new ValueEventListener() {

            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                ArrayList<String> cveIDCount = new ArrayList<String>();

                if (snapshot.exists()) {
                    Log.v(TAG, "userEntryVulnerabilityPath: snapshot exist"); //displays the key for the node


                    for (DataSnapshot ds : snapshot.getChildren()) {


                        String key = ds.getKey();

                        Class type = ds.getValue().getClass();

                        if (type == String.class) {

                            String value = ds.getValue(String.class);

                            Log.v(TAG, "frag45key: " + key); //displays the key for the node
                            Log.v(TAG, "frag45value: " + value); //displays the key for the node


                            cveIDCount.add(value);
                            searchCVEByID(value);
//
//                            cveListID.add(value);

                        }
                    }

                    if (cveIDCount.size() > 0) {
                        resultTitle.setText("Vulnerable: YES");
                        resultQuantityTitle.setText("Detected Vulnerabilities: " + String.valueOf(cveIDCount.size()));
                        vulnerabilitiesTitle.setText("Vulnerabilities ^");
                        scoreTitle.setText("Base Score ^");


                        TextView Vulnerabilities = (TextView) root.findViewById(R.id.vulnerabilitiesTitle);

                        Vulnerabilities.setOnClickListener(new View.OnClickListener() {

                            @Override
                            public void onClick(View view) {

                                if (VulnerabilitiesClick.equals("A-Z")) {

                                    vulnerabilitiesTitle.setText("Vulnerabilities v");

                                    Collections.sort(list, new Comparator<DataCve>() {
                                        @Override
                                        public int compare(DataCve dataCve, DataCve t1) {
                                            return dataCve.getCveName().compareTo(t1.getCveName());
                                        }
                                    });

                                    adapterCve.notifyDataSetChanged();

                                    VulnerabilitiesClick = "Z-A";


                                } else if (VulnerabilitiesClick.equals("Z-A")) {

                                    vulnerabilitiesTitle.setText("Vulnerabilities ^");

                                    Collections.sort(list, new Comparator<DataCve>() {
                                        @Override
                                        public int compare(DataCve dataCve, DataCve t1) {
                                            return t1.getCveName().compareTo(dataCve.getCveName());
                                        }
                                    });

                                    adapterCve.notifyDataSetChanged();

                                    VulnerabilitiesClick = "A-Z";
                                }
                            }


                        });


                        TextView BaseScore = (TextView) root.findViewById(R.id.scoreTitle);

                        BaseScore.setOnClickListener(new View.OnClickListener() {

                            @Override
                            public void onClick(View view) {

                                if (BaseScoreClick.equals("High-Low")) {

                                    scoreTitle.setText("Base Score v");

                                    Collections.sort(list, new Comparator<DataCve>() {
                                        @Override
                                        public int compare(DataCve dataCve, DataCve t1) {
                                            return dataCve.getCvssScore().compareTo(t1.getCvssScore());
                                        }
                                    });

                                    adapterCve.notifyDataSetChanged();

                                    BaseScoreClick = "Low-High";


                                } else if (BaseScoreClick.equals("Low-High")) {

                                    scoreTitle.setText("Base Score ^");

                                    Collections.sort(list, new Comparator<DataCve>() {
                                        @Override
                                        public int compare(DataCve dataCve, DataCve t1) {
                                            return t1.getCvssScore().compareTo(dataCve.getCvssScore());
                                        }
                                    });

                                    adapterCve.notifyDataSetChanged();

                                    BaseScoreClick = "High-Low";
                                }
                            }

                        });


                    }


                } else {

                    resultTitle.setText("Vulnerable: NO");
                    resultQuantityTitle.setText("Detected Vulnerabilities: " + String.valueOf(cveIDCount.size()));

                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.d(TAG, "DATABASE ERROR", error.toException());
            }
        });

    }

    private void searchCVEByID(String cveID) {

        DatabaseReference CVEDatabase = database.getReference("CVE");
        Query firebaseSearchCVEIDQuery = CVEDatabase.orderByChild("ID").equalTo(cveID);

        firebaseSearchCVEIDQuery.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

//                list.add(new ItemData(cveName, baseScore, cveID));

                if (snapshot.exists()) {


                    //get the main branch values.
                    for (DataSnapshot ds : snapshot.getChildren()) {

                        String cveName = ds.getKey();
                        String cveID = ds.child("ID").getValue(String.class);

                        //to get values of each CVE ID in the CVE Related branch which is the child of the main branch.
                        DataSnapshot CVSS = ds.child("CVSS");

                        //for each child of the CVE Related branch,

                        for (DataSnapshot ds2 : CVSS.getChildren()) {

                            Class type = ds2.getValue().getClass();

                            if (type.equals(String.class)) {
                                String value = ds2.getValue(String.class);
                                String key = ds2.getKey();

                                if (key.equals("Base Score")) {

                                    Log.v("getKey", "baseScoreKeyValue: " + key); //displays the key for the node
                                    Log.v("child", "baseScoreValueValue: " + value);   //gives the value for each children

                                    String baseScore = value.substring(0, 4);
                                    Log.v("child", "getvalueds3: " + baseScore);   //gives the value for each children

                                    list.add(new DataCve(cveName, baseScore, cveID));
                                }

                            }
                        }

                    }


                } else {
                    Log.d("ScanDevice", "No data found");
                }


                adapterCve.notifyDataSetChanged();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.d("ScanDevice", "DATABASE ERROR", error.toException());
            }
        });


    }
}