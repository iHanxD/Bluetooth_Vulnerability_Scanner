package com.example.bluetoothvulnerabilityscanner;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import java.util.ArrayList;

public class ItemAdapter extends RecyclerView.Adapter<ItemAdapter.MyViewHolder>{

    Context context;
    ArrayList<ItemData> list;
    private OnItemListener onItemListener;


    public ItemAdapter(Context context, ArrayList<ItemData> list, OnItemListener onItemListener) {
        this.context = context;
        this.list = list;
        this.onItemListener = onItemListener;
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {

        View v = LayoutInflater.from(context).inflate(R.layout.cve_item,parent, false);

        return new MyViewHolder(v, onItemListener);

    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {

        ItemData itemdata =  list.get(position);
        holder.cveName.setText(itemdata.getCveName());
        holder.cvssScore.setText(itemdata.getCvssScore());

        float cvssScore = Float.valueOf(itemdata.getCvssScore()).floatValue();

//        String cvssScore = itemdata.getCvssScore();

        Log.d("cvssScore", String.valueOf(cvssScore));

        //setting the tags for each cvss base score

        if ((cvssScore >= 0.1) && (cvssScore <= 3.9)){
            holder.cvssRating.setImageResource(R.drawable.low_tag);
        }
        else if((cvssScore >= 4.0) && (cvssScore <= 6.9)){
            holder.cvssRating.setImageResource(R.drawable.medium_tag);
        }
        else if((cvssScore >= 7.0) && (cvssScore <= 8.9)){
            holder.cvssRating.setImageResource(R.drawable.high_tag);
        }
        else if((cvssScore >= 9.0) && (cvssScore <= 10.0)){
            holder.cvssRating.setImageResource(R.drawable.critial_tag);
        }


    }

    @Override
    public int getItemCount() {
        return list.size();
    }

    public static class MyViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
        TextView cveName, cvssScore;
        ImageView cvssRating;
        OnItemListener onItemListener;

        public MyViewHolder(@NonNull View itemView, OnItemListener onItemListener) {
            super(itemView);
            cveName = itemView.findViewById(R.id.cveName);
            cvssScore = itemView.findViewById(R.id.cvssScore);
            cvssRating = itemView.findViewById(R.id.cvssRating);

            this.onItemListener = onItemListener;
            itemView.setOnClickListener(this);
        }

        @Override
        public void onClick(View view) {
            onItemListener.onItemClick(getAdapterPosition());
        }
    }

    public interface OnItemListener{
        void onItemClick(int position);
    }
}
