package com.example.bluetoothvulnerabilityscanner;

import androidx.appcompat.app.AppCompatActivity;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.os.Bundle;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Build;
import android.os.Bundle;
import android.widget.ListView;
import android.widget.TextView;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Set;


public class ScanAroundDevices extends AppCompatActivity {

    private static final String TAG = "ScanAroundDevices";
    BluetoothAdapter mBluetoothAdapter;
    public ArrayList<BluetoothDevice> mBTDevices = new ArrayList<>();
    public DeviceListAdapter mDeviceListAdapter;
    ListView lvNewDevices;

    // Create a BroadcastReceiver for ACTION_FOUND
    private final BroadcastReceiver mBroadcastReceiver1 = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            //When discovery finds a device
            if (action.equals(mBluetoothAdapter.ACTION_STATE_CHANGED)) {
                final int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, mBluetoothAdapter.ERROR);

                switch (state) {
                    case BluetoothAdapter.STATE_OFF:
                        Log.d(TAG, "onReceive: STATE OFF");
                        break;
                    case BluetoothAdapter.STATE_TURNING_OFF:
                        Log.d(TAG, "mBroadcastReceiver1: STATE TURNING OFF");
                        break;
                    case BluetoothAdapter.STATE_ON:
                        break;
                    case BluetoothAdapter.STATE_TURNING_ON:
                        Log.d(TAG, "mBroadcastReceiver1: STATE TURNING ON");
                        break;
                }
            }
        }
    };

    private final BroadcastReceiver mBroadcastReceiver2 = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();

            if (action.equals(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED)){

                int mode = intent.getIntExtra(BluetoothAdapter.EXTRA_SCAN_MODE, BluetoothAdapter.ERROR);

                switch (mode){
                    //Device is in Discoverable mode
                    case BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE:
                            Log.d(TAG, "mBroadcastRecevier2: Discoverability Enabled.");
                            break;

                    //Device is not in Discoverable mode
                    case BluetoothAdapter.SCAN_MODE_CONNECTABLE:
                        Log.d(TAG, "mBroadcastRecevier2: Discoverability Disabled. Able to receive connections");
                        break;

                    case BluetoothAdapter.SCAN_MODE_NONE:
                        Log.d(TAG, "mBroadcastRecevier2: Discoverabiliy Disabled.  Not able to receive connections.");
                        break;

                    case BluetoothAdapter.STATE_CONNECTING:
                        Log.d(TAG, "mBroadcastRecevier2: Connecting..");
                        break;

                    case BluetoothAdapter.STATE_CONNECTED:
                        Log.d(TAG, "mBroadcastRecevier2: Connected.");
                        break;

                }
            }

        }
    };

    /**
    Broadcast Receiver for listing devices not paired yet. This is executed bt btnDiscover() method
     */

    private BroadcastReceiver mBroadcastReceiver3 = new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            final String action  = intent.getAction();
            Log.d(TAG, "onReceive: ACTION FOUND");

            if(action.equals(BluetoothDevice.ACTION_FOUND)){
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                mBTDevices.add(device);
                Log.d(TAG, "onReceive: " + device.getName() + ":" + device.getAddress());
                mDeviceListAdapter = new DeviceListAdapter(context, R.layout.activity_device_list_adapter, mBTDevices);
                lvNewDevices.setAdapter(mDeviceListAdapter);
            }

        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(mBroadcastReceiver1);
    }


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scan_around_devices);
        Button btnONOFF = (Button) findViewById(R.id.OnOffButton);
        Button discoverableButton = (Button) findViewById(R.id.discoverableButton);
        lvNewDevices = (ListView) findViewById(R.id.lvNewDevices);
        mBTDevices = new ArrayList<>();
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();


        btnONOFF.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Log.d(TAG, "onClick: enabling/disabling bluetooth");
                enableDisableBT();
            }
        });


    }


    public void enableDisableBT() {
        //if device has no bluetooth capabilities
        if (mBluetoothAdapter == null) {
            Log.d(TAG, "enableDisableBT: No BT capabilities.");

        //if device has  bluetooth capabilities
        }else {

            if (!mBluetoothAdapter.isEnabled()) {
                Log.d(TAG, "enableDisableBT: enabling BT.");
                Intent enableBTIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                startActivity(enableBTIntent);

                IntentFilter BTIntent = new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED);
                registerReceiver(mBroadcastReceiver1, BTIntent);
            }
            if (mBluetoothAdapter.isEnabled()) {
                Log.d(TAG, "enableDisableBT: disabling BT.");
                mBluetoothAdapter.disable();

                IntentFilter BTIntent = new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED);
                registerReceiver(mBroadcastReceiver1, BTIntent);

            }
        }
    }


        public void btnEnableDisableDiscoverable(View view){
        Log.d(TAG, "btnbtnEnableDisableDiscoverable: Making device discoverable for 300s");

        Intent discoverableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
        discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION,300 );
        startActivity(discoverableIntent);

        IntentFilter intentFilter = new IntentFilter(mBluetoothAdapter.ACTION_SCAN_MODE_CHANGED);
        registerReceiver(mBroadcastReceiver2, intentFilter);

        }

        public void btnDiscover(View view){
        Log.d(TAG, "btnDiscover: Looking for unpaired devices.");

        String answer = String.valueOf(mBluetoothAdapter.isDiscovering());


        if(mBluetoothAdapter.isDiscovering()){
            mBluetoothAdapter.cancelDiscovery();
            Log.d(TAG, "btnDiscover: Cancelling discovery.");

            mBluetoothAdapter.startDiscovery();
            IntentFilter discoverDevicesIntent = new IntentFilter(BluetoothDevice.ACTION_FOUND);
            registerReceiver(mBroadcastReceiver3, discoverDevicesIntent);

        }

        if(!mBluetoothAdapter.isDiscovering()){
            Log.d(TAG, "btnDiscover: Starting discovery.");

            //check for BT permissions in manifest
            checkBTPermissions();

//            mBluetoothAdapter.startDiscovery();
            IntentFilter discoverDevicesIntent = new IntentFilter(BluetoothDevice.ACTION_FOUND);

            registerReceiver(mBroadcastReceiver3, discoverDevicesIntent);
            Log.d(TAG, "btnDiscover: registered receiver");

            Log.d(TAG, "mBluetoothAdapter: starting discovery");
            mBluetoothAdapter.startDiscovery();

        }

        }

    /**This is for all devices running API23+ Android must programmatically check the permissions for bluetooth.
     * Proper permissions in the manifest is not enough
     * Will only Execute on Android versions higher than lollipop
     * */

    private void checkBTPermissions(){

        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP){
            Log.d(TAG, "permissionCheck: permissionCheck");

            int permissionCheck  = this.checkSelfPermission("Manifest.permission.ACCESS_FINE_LOCATION");
            permissionCheck += this.checkSelfPermission("Manifest.permission.ACCESS_COARSE_LOCATION");

            if(permissionCheck !=0){
                Log.d(TAG, "permissionCheck: permissionCheck!=0");
                this.requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 1001);

            }
        }else{
            Log.d(TAG, "checkBTPermissions: No need to check permissions. SDK verson < LOLLIPOP");
        }

        }

/////HERE//////


//    TextView textView;
//    Build build;
//    Build.VERSION version;
//    String information;
//
//    private String LOG_TAG; // Just for logging purposes. Could be anything. Set to app_name
//    private int REQUEST_ENABLE_BT = 99; // Any positive integer should work.
//    private BluetoothAdapter mBluetoothAdapter;
//
//    @Override
//    protected void onCreate(Bundle savedInstanceState) {
//        super.onCreate(savedInstanceState);
//        setContentView(R.layout.activity_main);
//        textView = findViewById(R.id.textView);
//
//        saveInfo();
//        textView.setText(information);
//
//        super.onCreate(savedInstanceState);
//        setContentView(R.layout.activity_main);
//
//        Button scanBt = (Button) findViewById(R.id.button_scanBT);
//
//        LOG_TAG = getResources().getString(R.string.app_name);
//        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
//
//        scanBt.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                scanForBluetoothDevices();
//                Log.d("TAG", "testing");
//            }
//        });
//
//        private void scanForBluetoothDevices()
//        {
//            // Start this on a new activity without passing any data to it
//            Intent intent = new Intent(this, FoundBTDevices.class);
//            startActivity(intent);
//        }
//
//    }
//
//    if (!bluetoothAdapter.isBluetoothEnabled()) {
//        Toast.makeText(this, "WiFi is disabled ... We need to enable it", Toast.LENGTH_LONG).show();
//        wifiManager.setWifiEnabled(true);
//    }

}

