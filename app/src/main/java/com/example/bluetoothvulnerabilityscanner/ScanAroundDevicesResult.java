package com.example.bluetoothvulnerabilityscanner;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SearchView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class ScanAroundDevicesResult extends AppCompatActivity implements AdapterSearchDevice.OnItemListener {

    private DatabaseReference UserEntryDatabase;
    AdapterSearchDevice adapterSearchDevice;
    ArrayList<DataSearchDevice> list;
    ArrayList<DataSearchDevice> searchedList;
    ArrayList<String> combinedUserEntryID;
    RecyclerView recyclerView;
    SearchView searchView;
    Button buttonalphabet;
    Button buttondate;
    Button buttonvulnerabilitycount;
    Context context = this;
    String deviceName;

    String AlphabetClick;
    String DateClick;
    String VulnerabilityCountClick;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scan_around_devices_result);
        setTitle("Scan Around Devices Result");

        FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");
        UserEntryDatabase = database.getReference("Users");

        recyclerView = findViewById(R.id.deviceRecycleView);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(context));

        searchView = findViewById(R.id.deviceSearchView);

//        radioGroup = findViewById(R.id.radioGroup);

        buttondate = findViewById(R.id.sortbydate);
        buttonvulnerabilitycount = findViewById(R.id.sortbyvulnerabilitycount);


        list = new ArrayList<>();

        //To get the intent from scanAroundDevices
        Intent intent = getIntent();
        deviceName = intent.getStringExtra("deviceName");
        combinedUserEntryID = intent.getStringArrayListExtra("combinedUserEntryID");
        Log.v("ScanAroundDevicesResult", ""+ combinedUserEntryID.size());

        DateClick = buttondate.getText().toString();
        VulnerabilityCountClick = buttonvulnerabilitycount.getText().toString();

        buttondate.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                DateClick = buttondate.getText().toString();

                if (DateClick.equals("Newest")) {

                    buttondate.setText("Oldest");
                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override
                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {

                            Long date1 = dataSearchDevice.getDate();
                            Long date2 = t1.getDate();

                            return date1.compareTo(date2);
                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();

                }else if(DateClick.equals("Oldest")){

                    buttondate.setText("Newest");

                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override

                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {

                            Long date1 = dataSearchDevice.getDate();
                            Long date2 = t1.getDate();

                            return date2.compareTo(date1);

                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();
                }
            }
        });

        buttonvulnerabilitycount.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                VulnerabilityCountClick = buttonvulnerabilitycount.getText().toString();

                if (VulnerabilityCountClick.equals("Highest")) {

                    buttonvulnerabilitycount.setText("Lowest");
                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override
                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {
                            return dataSearchDevice.getVulnerabilities().compareTo(t1.getVulnerabilities());
                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();

                }else if(VulnerabilityCountClick.equals("Lowest")){

                    buttonvulnerabilitycount.setText("Highest");

                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override
                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {
                            return t1.getVulnerabilities().compareTo(dataSearchDevice.getVulnerabilities());
                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();
                }
            }
        });



    }

    @Override

    protected void onStart() {
        super.onStart();

        //get all the data of User Entries.
        if (UserEntryDatabase != null) {
            UserEntryDatabase.addValueEventListener(new ValueEventListener() {

                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    if (snapshot.exists()) {

                        list = new ArrayList<>();



                        for (DataSnapshot ds : snapshot.getChildren()) {

                            String userID = ds.getKey();

                            DataSnapshot scanResultsBranch = ds.child("scanresults");

                            for (DataSnapshot ds2 : scanResultsBranch.getChildren()) {

                                String userSubmissionID2 = ds2.getKey();

                                String userSubmissionID = userID + "/scanresults/" + userSubmissionID2;

                                String manufacturer = ds2.child("manufacturer").getValue(String.class);
                                String model = ds2.child("model").getValue(String.class);

                                String manufacturerdmodel = manufacturer + " " + model;
                                String androidversion = ds2.child("release").getValue(String.class);
                                String chipset = ds2.child("chipset").getValue(String.class);

                                String socmodel = ds2.child("socmodel").getValue(String.class);
                                String socmanufacturer = ds2.child("socmanufacturer").getValue(String.class);

                                String socmanufacturermodel = socmodel + ", " + socmanufacturer;

                                if (chipset.equals("unknown")) {
                                    chipset = socmanufacturermodel;
                                }

                                Long dateofscan = ds2.child("date").getValue(Long.class);

                                //default to 0 first. Will add up in the next part.
                                int vulnerabilityCount = 0;

                                //not all will have vulnerabilities as such default as 0 above.
                                DataSnapshot Branch = ds2.child("vulnerabilities");

                                Long vulnerabilityCountHolder = Branch.getChildrenCount();

                                vulnerabilityCount = vulnerabilityCountHolder.intValue();

                                for (int r = 0; r < combinedUserEntryID.size(); r++) {

                                    if (combinedUserEntryID.get(r).equals(userSubmissionID2)) {

                                        list.add(new DataSearchDevice(userSubmissionID, manufacturerdmodel, androidversion, chipset, dateofscan, vulnerabilityCount));
                                    }
                                }
                            }
                        }

                        if(deviceName==null){
                            //fill up the searched array with values by searching something.
                            String searchText = "";
                            search(searchText);

                        }else{
                            String searchText = deviceName;
                            search(searchText);
                            Log.v("deviceNameOnStart", deviceName);
                        }
                    }

                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {
                    Log.d("SearchDevices", "DATABASE ERROR", error.toException());
                }
            });

        }


        if (searchView != null) {

            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                @Override
                public boolean onQueryTextSubmit(String searchText) {
                    return false;
                }

                @Override
                public boolean onQueryTextChange(String searchText) {

                    //searchText can never be null at the start to prevent errors
                    if (searchText.equals(null)){
                    searchText = "";
                    }

                    search(searchText);
                    return true;
                }
            });
        }

    }

    @Override
    public void onItemClick(int position) {

        String userSubmissionID = searchedList.get(position).getuserSubmissionID();

        Log.d("onItemClick", userSubmissionID);

        Intent intent = new Intent(context, SearchDeviceResult.class);
        intent.putExtra("userSubmissionID", userSubmissionID);
        startActivity(intent);

    }



    public void search(String searchText) {

        Log.v("SEARCHFUNCTION:", "called");

        searchedList = new ArrayList<>();

        for (int i = 0; i < list.size(); i++) {

            String manufacturermodel = list.get(i).getManufacturerModel();

            if (manufacturermodel != null) {
                Log.d("manufacturermodel", manufacturermodel);

                if (manufacturermodel.toLowerCase().contains(searchText.toLowerCase())) {
                    searchedList.add(list.get(i));

                    Log.d("myListSize", String.valueOf(searchedList.size()));
                }

            } else {
                Log.d("brandmodelname", "empty");
            }
        }

        adapterSearchDevice = new AdapterSearchDevice(context, searchedList, this);
        recyclerView.setAdapter(adapterSearchDevice);
        adapterSearchDevice.notifyDataSetChanged();

    }

//    public String dateconverter(String date) {
//
//        //default epoch time
//        String datenumeric =  "19700101000000";
//
//        if(date!=null) {
//
//            String datetime = date.substring(11, 13) + date.substring(14, 16) + date.substring(17, 19);
//            String datedate = date.substring(8, 10);
//            String datemonth = date.substring(4, 7).toLowerCase();
//            String dateyear = date.substring(date.length() - 4);
//
//            if (datemonth.equals("jan")) {
//                datemonth = "01";
//
//            } else if (datemonth.equals("feb")) {
//                datemonth = "02";
//
//            } else if (datemonth.equals("mar")) {
//                datemonth = "03";
//
//            } else if (datemonth.equals("april")) {
//                datemonth = "04";
//
//            } else if (datemonth.equals("may")) {
//                datemonth = "05";
//
//            } else if (datemonth.equals("june")) {
//                datemonth = "06";
//
//            } else if (datemonth.equals("july")) {
//                datemonth = "07";
//
//            } else if (datemonth.equals("aug")) {
//                datemonth = "08";
//
//            } else if (datemonth.equals("sep")) {
//                datemonth = "09";
//
//            } else if (datemonth.equals("oct")) {
//                datemonth = "10";
//
//            } else if (datemonth.equals("nov")) {
//                datemonth = "11";
//
//            } else if (datemonth.equals("dec")) {
//                datemonth = "12";
//
//            } else {
//                datemonth = "error";
//            }
//
//            datenumeric = dateyear + datemonth + datedate + datetime;
//
//            return datenumeric;
//        }
//
//        return datenumeric;
//    }
}





