package com.example.bluetoothvulnerabilityscanner;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import android.view.View.OnClickListener;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.UserProfileChangeRequest;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

public class RegisterPage extends AppCompatActivity {

    private static final String TAG = "RegisterPage";

    EditText mUserName, mEmail, mPassword, mPasswordConfirm;
    Button mRegisterBtn;
    TextView mLoginBtn;
    FirebaseAuth fAuth;
    ProgressBar progressBar;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);

        setTitle("Register");

        mUserName = findViewById(R.id.username);
        mEmail = findViewById(R.id.email);
        mPassword = findViewById(R.id.password);
        mPasswordConfirm = findViewById(R.id.confirmpassword);


        mRegisterBtn = findViewById(R.id.registerBtn);
        mLoginBtn = findViewById(R.id.login);

        fAuth = FirebaseAuth.getInstance();
        progressBar = findViewById(R.id.progressBar);

        if (fAuth.getCurrentUser() != null) {
            startActivity(new Intent(getApplicationContext(),MainActivity.class));
            finish();
        }

        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        if (user != null) {
            // Name, email address, and profile photo Url
            String name = user.getDisplayName();
            String email = user.getEmail();

            // Check if user's email is verified
            boolean emailVerified = user.isEmailVerified();

            // The user's ID, unique to the Firebase project. Do NOT use this value to
            // authenticate with your backend server, if you have one. Use
            // FirebaseUser.getIdToken() instead.
            String uid = user.getUid();

            Log.v("usertest", name + " " + email + " " + " " + uid);
        }

        mRegisterBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick (View v) {
                String username = mUserName.getText().toString();
                String email = mEmail.getText().toString().trim();
                String password = mPassword.getText().toString().trim();
                String passwordconfirm = mPasswordConfirm.getText().toString().trim();


                //CHECK FOR DUPLICATE USERNAMES! DONT ALLOW USER TO USE DUPLICATED USERNAMES ON DB

                if(TextUtils.isEmpty(username)) {
                    mUserName.setError("Username field is empty. Please input a username");
                    return;
                }

                if(TextUtils.isEmpty(email)) {
                    mEmail.setError("Email field is empty. Please input an email address");
                    return;
                }

                if(TextUtils.isEmpty(password)) {
                    mPassword.setError("Password field is empty. Please input a password");
                    return;
                }

                if(TextUtils.isEmpty(passwordconfirm)) {
                    mPasswordConfirm.setError("Confirm Password field is empty. Please input a password");
                    return;
                }

                if(!password.equals(passwordconfirm)){
                    mPasswordConfirm.setError("Confirm Password value not equal to password! Please retype!");
                    return;
                }

                if(password.length() < 6) {
                    mPassword.setError("Password must be more than 6 Characters");
                    return;
                }

                progressBar.setVisibility(View.VISIBLE);

                //Register User into Firebase

                fAuth.createUserWithEmailAndPassword(email,password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if(task.isSuccessful()) {
                            Toast.makeText(RegisterPage.this, "User register successfully.", Toast.LENGTH_SHORT).show();

                            FirebaseUser fireuser = fAuth.getCurrentUser();

                            //send email verification
                            fireuser.sendEmailVerification().addOnSuccessListener(new OnSuccessListener<Void>() {
                                @Override

                                public void onSuccess(Void aVoid) {
                                    Toast.makeText(RegisterPage.this, "Verification email has been sent.",Toast.LENGTH_SHORT).show();

                                }
                            }).addOnFailureListener(new OnFailureListener() {
                                @Override
                                public void onFailure(@NonNull Exception e) {
                                    Log.v(TAG, "onFailure: Email not sent: " + e.getMessage());

                                }
                            });

                            //Update display name of user
                            UserProfileChangeRequest profileChangeRequest = new UserProfileChangeRequest.Builder().setDisplayName(username).build();

                            //update profile takes longer to finish than the rest. Hence, we need to wait for it to complete before bringing us to the next activity.
                            fireuser.updateProfile(profileChangeRequest).addOnSuccessListener(new OnSuccessListener<Void>() {
                                @Override
                                public void onSuccess(Void unused) {
                                    Log.v(TAG, "onSuccess: Update profile display name set successfully");

                                    //after that, go to next activity,
                                    Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
                                    startActivity(intent);
                                    RegisterPage.this.finish();


                                }
                            }).addOnFailureListener(new OnFailureListener() {
                                @Override
                                public void onFailure(@NonNull Exception e) {

                                    //if failed setting the username of the user,
                                    Log.v(TAG, "onFailure: Update profile display name not set: " + e.getMessage());
                                    Toast.makeText(RegisterPage.this, "Error setting username. Please restart application! ",Toast.LENGTH_SHORT).show();

                                }
                            });

                        } else {
                            Toast.makeText(RegisterPage.this, "User register failed." + task.getException().getMessage(),Toast.LENGTH_SHORT).show();
                            progressBar.setVisibility(View.GONE);
                        }
                    }
                });
            }
        });

        mLoginBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(getApplicationContext(), LoginPage.class));
            }
        });
    }
}
