package com.example.bluetoothvulnerabilityscanner;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SearchView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;


public class SearchCVE extends Fragment implements AdapterCve.OnItemListener {

    View root;
    Context context;

    private DatabaseReference cveDatabase;
    RecyclerView recyclerView;
    SearchView searchView;
    RadioGroup radioGroup;
    RadioButton radioButton;


    Button buttonalphabet;
    Button buttonvulnerabilitycount;


    AdapterCve adapterCve;
    ArrayList<DataCve> list;
    ArrayList<DataCve> searchedList;
    ArrayList<String> cveListID;

    String cveName;

    String AlphabetClick;
    String VulnerabilityCountClick;

    public SearchCVE() {
        // Required empty public constructor
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        root = inflater.inflate(R.layout.fragment_search_cve, container, false);

        FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");
        cveDatabase = database.getReference("CVE");

        context = container.getContext();

        recyclerView = root.findViewById(R.id.cveRecycleView);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(context));

        searchView = root.findViewById(R.id.cveSearchView);

        buttonalphabet = root.findViewById(R.id.sortbyalphabet);
        buttonvulnerabilitycount = root.findViewById(R.id.sortbyvulnerabilitycount);


        list = new ArrayList<>();

        AlphabetClick = buttonalphabet.getText().toString();
        VulnerabilityCountClick = buttonvulnerabilitycount.getText().toString();


        //get all the data of User Entries.
        if (cveDatabase != null) {
            cveDatabase.addValueEventListener(new ValueEventListener() {

                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    if (snapshot.exists()) {

                        list = new ArrayList<>();

                        //get the main branch values.
                        for (DataSnapshot ds : snapshot.getChildren()) {

                            String cveName = ds.getKey();
                            String cveID = ds.child("ID").getValue(String.class);

                            //to get values of each CVE ID in the CVE Related branch which is the child of the main branch.
                            DataSnapshot CVSS = ds.child("CVSS");

                            //for each child of the CVE Related branch,

                            for (DataSnapshot ds2 : CVSS.getChildren()) {

                                Class type = ds2.getValue().getClass();

                                if (type.equals(String.class)) {
                                    String value = ds2.getValue(String.class);
                                    String key = ds2.getKey();

                                    if (key.equals("Base Score")) {

                                        Log.v("getKey", "baseScoreKeyValue: " + key); //displays the key for the node
                                        Log.v("child", "baseScoreValueValue: " + value);   //gives the value for each children

                                        String baseScore = value.substring(0, 4);
                                        Log.v("child", "getvalueds3: " + baseScore);   //gives the value for each children

                                        list.add(new DataCve(cveName, baseScore, cveID));
                                    }
                                }
                            }
                        }

                        if (cveName == null) {
                            //fill up the searched array with values by searching something.
                            String searchText = "";
                            search(searchText);

                        } else {
                            String searchText = cveName;
                            search(searchText);
                            Log.v("deviceNameOnStart", cveName);
                        }


                    }

                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {
                    Log.d("SearchDevices", "DATABASE ERROR", error.toException());
                }
            });

        }


        if (searchView != null) {

            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                @Override
                public boolean onQueryTextSubmit(String searchText) {
                    return false;
                }

                @Override
                public boolean onQueryTextChange(String searchText) {

                    //searchText can never be null at the start to prevent errors
                    if (searchText.equals(null)) {
                        searchText = "";
                    }

                    search(searchText);
                    return true;
                }
            });
        }

        return root;

    }


    @Override
    public void onItemClick(int position) {

        String cveName = list.get(position).getCveName();
        String cveID = list.get(position).getcveID();

        Log.d("onItemClick", cveName);

        Intent intent = new Intent(context, CveInfo.class);
        intent.putExtra("cveName", cveName);
        intent.putExtra("cveID", cveID);
        startActivity(intent);

    }

    public void search(String searchText) {

        Log.v("SEARCHFUNCTION:", "called");

        searchedList = new ArrayList<>();

        for (int i = 0; i < list.size(); i++) {

            String fullcvename = list.get(i).getCveName();

            if (fullcvename != null) {
                Log.d("fullcvename", fullcvename);

                if (fullcvename.toLowerCase().contains(searchText.toLowerCase())) {
                    searchedList.add(list.get(i));

                    Log.d("myListSize", String.valueOf(searchedList.size()));
                }

            } else {
                Log.d("brandmodelname", "empty");
            }
        }

        adapterCve = new AdapterCve(context, searchedList, this);
        recyclerView.setAdapter(adapterCve);
        adapterCve.notifyDataSetChanged();


        buttonalphabet.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                AlphabetClick = buttonalphabet.getText().toString();

                if (AlphabetClick.equals("A-Z")) {

                    buttonalphabet.setText("Z-A");
                    Collections.sort(searchedList, new Comparator<DataCve>() {
                        @Override

                        public int compare(DataCve dataCve, DataCve t1) {
                            return t1.getCveName().compareTo(dataCve.getCveName());

                        }
                    });

                    adapterCve.notifyDataSetChanged();

                }else if(AlphabetClick.equals("Z-A")){

                    buttonalphabet.setText("A-Z");

                    Collections.sort(searchedList, new Comparator<DataCve>() {
                        @Override
                        public int compare(DataCve dataCve, DataCve t1) {
                            return dataCve.getCveName().compareTo(t1.getCveName());
                        }
                    });

                    adapterCve.notifyDataSetChanged();
                }
            }
        });


        buttonvulnerabilitycount.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                VulnerabilityCountClick = buttonvulnerabilitycount.getText().toString();

                if (VulnerabilityCountClick.equals("Highest")) {

                    buttonvulnerabilitycount.setText("Lowest");
                    Collections.sort(searchedList, new Comparator<DataCve>() {
                        @Override
                        public int compare(DataCve dataCve, DataCve t1) {
                            return dataCve.getCvssScore().compareTo(t1.getCvssScore());
                        }
                    });

                    adapterCve.notifyDataSetChanged();

                }else if(VulnerabilityCountClick.equals("Lowest")){

                    buttonvulnerabilitycount.setText("Highest");

                    Collections.sort(searchedList, new Comparator<DataCve>() {
                        @Override
                        public int compare(DataCve dataCve, DataCve t1) {
                            return t1.getCvssScore().compareTo(dataCve.getCvssScore());
                        }
                    });

                    adapterCve.notifyDataSetChanged();
                }
            }
        });

    }


}