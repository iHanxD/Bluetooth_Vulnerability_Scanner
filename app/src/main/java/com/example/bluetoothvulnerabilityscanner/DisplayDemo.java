package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;

import com.denzcoskun.imageslider.ImageSlider;
import com.denzcoskun.imageslider.models.SlideModel;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.List;

public class DisplayDemo extends AppCompatActivity{

    private static final String TAG = "DisplayDemo";

    //Database link instance
    FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");

    ImageSlider imageSlider;
    TextView textTitleView;
    TextView textVideoLink;
    ArrayList<DataDemoInfo> list;
    RecyclerView recyclerView;
    AdapterDemoInfo adapterdemoinfo;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_display_demo);



//        Intent intent = getIntent();
//        String PocDemoName = intent.getStringExtra("cveName");

        recyclerView = findViewById(R.id.textContentRV);
        imageSlider = findViewById(R.id.image_slider);
        textTitleView = findViewById(R.id.textTitle);
        textVideoLink = findViewById(R.id.videoLink);


        ArrayList<SlideModel> slideModels = new ArrayList<>();
        slideModels.add(new SlideModel(R.drawable.tracetogetherlogo, null));
        slideModels.add(new SlideModel(R.drawable.tracetogetherblehandshake, null));
        slideModels.add(new SlideModel(R.drawable.tracetogetherattackdiagram, null));

        imageSlider.setImageList(slideModels);

        list = new ArrayList<>();
        adapterdemoinfo = new AdapterDemoInfo(this, list);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(adapterdemoinfo);

        String PocDemoName = "TraceTogetherPOC";

        DatabaseReference pocdemo = database.getReference("Poc_Demo");

        DatabaseReference pocdemotitle = database.getReference("Poc_Demo/" + PocDemoName + "/title");
        DatabaseReference pocvideolink = database.getReference("Poc_Demo/" + PocDemoName + "/video");
        DatabaseReference pocdemocontent = database.getReference("Poc_Demo/" + PocDemoName + "/content");
        DatabaseReference pocdemoimages = database.getReference("Poc_Demo/" + PocDemoName + "/images");

        pocdemotitle.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String title = snapshot.getValue(String.class);

                if(title!=null){
                Log.d(TAG, "Title value is: " + title);
                textTitleView.setText(title);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read title value.", error.toException());

            }
        });

        pocvideolink.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String link = snapshot.getValue(String.class);
                if(link!=null) {
                    Log.d(TAG, "Video Link value is: " + link);
                    textVideoLink.setText("Video Demo Link: " + link);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read title value.", error.toException());

            }
        });

        pocdemocontent.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                if (snapshot.exists()) {
                    for (DataSnapshot ds : snapshot.getChildren()) {
                        String key = ds.getKey();
                        String subtitle = ds.child("subtitle").getValue(String.class);
                        String subtitleinfo = ds.child("value").getValue(String.class);

                        Log.d(TAG, "subtitle is: " + subtitle);
                        Log.d(TAG, "value is: " + subtitleinfo);

                        list.add(new DataDemoInfo(subtitle, subtitleinfo));
                    }

                    adapterdemoinfo.notifyDataSetChanged();
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read pocdemocontent value.", error.toException());

            }
        });


        pocdemoimages.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                if (snapshot.exists()) {
                    for (DataSnapshot ds : snapshot.getChildren()) {
                        String key = ds.getKey();

                        Class type = ds.getValue().getClass();
                        if (type == String.class) {

                            String value = ds.getValue(String.class);

                            Log.v(TAG, "imagekey: " + key); //displays the key for the node
                            Log.v(TAG, "imagelink: " + value); //displays the key for the node

                        }

                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to imagelink value.", error.toException());

            }
        });

    }
}