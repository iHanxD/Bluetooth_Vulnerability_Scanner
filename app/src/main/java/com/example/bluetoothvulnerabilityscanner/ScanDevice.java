package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.FragmentPagerAdapter;
import androidx.viewpager.widget.ViewPager;

import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;


import com.google.android.material.tabs.TabLayout;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

public class ScanDevice extends AppCompatActivity {

    private TabLayout tabLayout;
    private ViewPager viewPager;

    Context context = this;

    Map<String, String> cpuinfo = new HashMap<String, String>();

    Build build;
    Build.VERSION version;
    Build.Partition partition;

    private static final String TAG = "ScanDevice";

    /**
     * Value used for when a build property is unknown.
     */
    public static final String UNKNOWN = "unknown";

    /**
     * Either a changelist number, or a label like "M4-rc20".
     */
    public final String ID = build.ID;

    public String ANDROIDID;

    /**
     * A build ID string meant for displaying to the user
     */
    public final String DISPLAY = build.DISPLAY;

    /**
     * The name of the overall product.
     */
    public final String PRODUCT = build.PRODUCT;

    /**
     * The name of the industrial design.
     */
    public final String DEVICE = build.DEVICE;

    /**
     * The name of the underlying board, like "goldfish".
     */
    public final String BOARD = build.BOARD;

    /**
     * The end-user-visible name for the end product.
     */
    public final String MODEL = build.MODEL;

    /**
     * The manufacturer of the product/hardware.
     */
    public final String MANUFACTURER = build.MANUFACTURER;

    /**
     * The consumer-visible brand with which the product/hardware will be associated, if any.
     */
    public final String BRAND = build.BRAND;

    /**
     * Device Fingerprint
     */
    public final String FINGERPRINT = build.FINGERPRINT;

    /**
     * The system bootloader version number.
     */
    public final String BOOTLOADER = build.BOOTLOADER;

    /**
     * The name of the hardware (from the kernel command line or /proc).
     */
    public final String HARDWARE = build.HARDWARE;

    /**
     * The name of the radio/baseband
     */
    public String RADIO = build.getRadioVersion();

    public final String RELEASE = version.RELEASE;

    public final String BASE_OS = version.BASE_OS;

    public final String SECURITY_PATCH = version.SECURITY_PATCH;

    public final int PREVIEW_SDK_INT = version.PREVIEW_SDK_INT;

    public final int SDK_INT = version.SDK_INT;

    public final String CODENAME = version.CODENAME;

    public final String PARTITION_NAME_SYSTEM = partition.PARTITION_NAME_SYSTEM;

    public final String SERIAL = build.SERIAL;

    public final String SUPPORTED_32_BIT_ABIS[] = build.SUPPORTED_32_BIT_ABIS;

    public final String SUPPORTED_64_BIT_ABIS[] = build.SUPPORTED_64_BIT_ABIS;

    public final String SUPPORTED_ABIS[] = build.SUPPORTED_ABIS;


    //These variables are declared as unknown first as they are only available on API levels 31 and above
    //Only if the device is of API level 31 will the scanner search for these values.
    /**
     * The model name of the device's primary system-on-chip.
     */
    public String SOC_MODEL = UNKNOWN;

    public String SOC_MANUFACTURER = UNKNOWN;

    /**
     * The SKU of the hardware (from the kernel command line)
     */
    public String SKU = UNKNOWN;

    /**
     * The SKU of the device as set by the original design manufacturer (ODM)
     */
    public String ODM_SKU = UNKNOWN;

    public String RELEASE_OR_CODENAME = UNKNOWN;

    //These variables are declared as unknown as some devices may not have these information. We will use the getCPUInfo() function
    //to get their values
    public String CHIPSET = UNKNOWN;
    public String CPUARCHITECTURE = UNKNOWN;
    public String CPUFEATURES = UNKNOWN;

    //defined in the getNumberofCores() function;
    public Integer NUMBEROFCORES;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scan_device);
        setTitle("Scan Device");

        /**
         * Only Able to retrieve AndroidID for APIs 29++ IMEI is not possible to retrieve
         * on 3rd party applications. Android ID is not able to change aft factory reset.
         */

        ANDROIDID = Settings.Secure.getString(this.getContentResolver(), Settings.Secure.ANDROID_ID);
        Log.d("ANDROIDID", ANDROIDID);

        sdk31Info();

        NUMBEROFCORES = getNumberOfCores();
        Log.d("numberofcores", String.valueOf(NUMBEROFCORES));

        if(RADIO.equals(null) || RADIO.equals("")){
            RADIO = UNKNOWN;
        }

        try {
            cpuinfo = getCPUInfo();
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (Map.Entry<String, String> entry : cpuinfo.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();

            Log.d("cpuinfo", key + ": " + value);

            if (key.equals("Processor")) CPUARCHITECTURE = value;
            if (key.equals("Features")) CPUFEATURES = value;
            if (key.equals("Hardware")) CHIPSET = value;

        }

        tabLayout = findViewById(R.id.tabLayout);
        viewPager = findViewById(R.id.viewpager);
        tabLayout.setupWithViewPager(viewPager);

        AdapterVP vpAdaper = new AdapterVP(getSupportFragmentManager(), FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT);
        vpAdaper.addFragment(new fragment1(), "Device Info");
        vpAdaper.addFragment(new fragment2(), "Vulnerability Assessment");
        viewPager.setAdapter(vpAdaper);
        }

    //TEST ON API LEVEL 31 MOBILE DEVICES!
    public void sdk31Info() {

        //These information can only be pulled if the android SDK/API level is 31 or higher
        if (SDK_INT >= 31) {

            /** The model name of the device's primary system-on-chip. */
            SOC_MODEL = build.SOC_MODEL;

            SOC_MANUFACTURER = build.SOC_MANUFACTURER;

            /** The SKU of the hardware (from the kernel command line) */
            SKU = build.SKU;

            /** The SKU of the device as set by the original design manufacturer (ODM) */
            ODM_SKU = build.ODM_SKU;

            RELEASE_OR_CODENAME = version.RELEASE_OR_CODENAME;

        }

    }

    //much faster to get information with availableProcessors() function on devices API17+
    public int getNumberOfCores() {
        if (Build.VERSION.SDK_INT >= 17) {
            return Runtime.getRuntime().availableProcessors();
        } else {
            // for older devices before API17+
            return getNumCoresOldPhones();
        }
    }

    /**
     * Gets the number of cores available in this device, across all processors.
     * Requires: Ability to peruse the filesystem at "/sys/devices/system/cpu"
     */

    private int getNumCoresOldPhones() {
        //Private Class to display only CPU devices in the directory listing
        class CpuFilter implements FileFilter {
            @Override
            public boolean accept(File pathname) {
                //Check if filename is "cpu", followed by a single digit number
                if (Pattern.matches("cpu[0-9]+", pathname.getName())) {
                    return true;
                }
                return false;
            }
        }

        try {
            //Get directory containing CPU info
            File dir = new File("/sys/devices/system/cpu/");
            //Filter to only list the devices we care about
            File[] files = dir.listFiles(new CpuFilter());
            //Return the number of cores (virtual CPU devices)
            return files.length;
        } catch (Exception e) {
            //Default to return 1 core if failed to get result
            return 1;
        }
    }


    public static Map<String, String> getCPUInfo() throws IOException {

        BufferedReader br = new BufferedReader(new FileReader("/proc/cpuinfo"));

        String str;

        Map<String, String> output = new HashMap<>();

        while ((str = br.readLine()) != null) {

            String[] data = str.split(":");

            if (data.length > 1) {

                String key = data[0].trim().replace(" ", "_");
                if (key.equals("model_name")) key = "cpu_model";

                output.put(key, data[1].trim());
                Log.d("key", key);

            }

        }
        br.close();
        return output;
    }
}