package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.ImageView;
import android.widget.TextView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;
import com.ms.square.android.expandabletextview.ExpandableTextView;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class CveInfo extends AppCompatActivity {

    private static final String TAG = "Build";

    //Database link instance
    FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cve_info);

        Intent intent = getIntent();
        String cveName = intent.getStringExtra("cveName");
        String cveID = intent.getStringExtra("cveID");

//        String cveName = "CVE-2022-20026";
//        String cveID = "68e086da-d103-41df-bc5c-40f0bbbe30a5";


        Log.d("cveName: ", cveName);
        Log.d("cveID: ", cveID);

        //Database references
        DatabaseReference cveDescription = database.getReference("CVE/" + cveName + "/Vulnerability Description");
        DatabaseReference cveBaseScore = database.getReference("CVE/" + cveName + "/CVSS/Base Score");
        DatabaseReference cveVector = database.getReference("CVE/" + cveName + "/CVSS/Vector");
        DatabaseReference cveReferences = database.getReference("CVE/" + cveName + "/References");
        DatabaseReference cveIOC = database.getReference("IOC");


        //defining of textViews
        TextView cveNameTextView = (TextView) findViewById(R.id.cveName);
        TextView cveBaseScoreTextView = (TextView) findViewById(R.id.baseScoreValue);
        TextView cveVectorTextView = (TextView) findViewById(R.id.vectorValue);
        ImageView cveBaseScoreTag = (ImageView) findViewById(R.id.cveBaseScoreTag);
        ExpandableTextView descriptionTextView = (ExpandableTextView) findViewById(R.id.description_expandable_text_view);
        ExpandableTextView iocTextView = (ExpandableTextView) findViewById(R.id.ioc_expandable_text_view);
        ExpandableTextView referencesTextView = (ExpandableTextView) findViewById(R.id.references_expandable_text_view);


        //setting of variables
        cveNameTextView.setText(cveName);

        cveDescription.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String cveDescriptionValue = snapshot.getValue(String.class);
                Log.d(TAG, "Description value is: " + cveDescriptionValue);
                descriptionTextView.setText(cveDescriptionValue);
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read description value.", error.toException());

            }
        });

        cveBaseScore.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String cveBaseScoreValue = snapshot.getValue(String.class);

                String BaseScore = cveBaseScoreValue.substring(0,4);

                Log.d(TAG, "Base Score value is: " + BaseScore);

                cveBaseScoreTextView.setText(BaseScore);

                float cvssScore = Float.valueOf(BaseScore).floatValue();

//        String cvssScore = itemdata.getCvssScore();

                Log.d("cvssScore", String.valueOf(cvssScore));

                //setting the tags for each cvss base score

                if ((cvssScore >= 0.1) && (cvssScore <= 3.9)){
                    cveBaseScoreTag.setImageResource(R.drawable.low_tag);
                }
                else if((cvssScore >= 4.0) && (cvssScore <= 6.9)){
                    cveBaseScoreTag.setImageResource(R.drawable.medium_tag);
                }
                else if((cvssScore >= 7.0) && (cvssScore <= 8.9)){
                    cveBaseScoreTag.setImageResource(R.drawable.high_tag);
                }
                else if((cvssScore >= 9.0) && (cvssScore <= 10.0)){
                    cveBaseScoreTag.setImageResource(R.drawable.critial_tag);
                }

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read Base Score value.", error.toException());

            }
        });


        cveVector.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String cveVectorValue = snapshot.getValue(String.class);
                Log.d(TAG, "cve vector value is: " + cveVectorValue);
                cveVectorTextView.setText(cveVectorValue);
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read cve vector value.", error.toException());

            }
        });

        cveReferences.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String cveReferences = "";
                int i = 0;

                for (DataSnapshot ds : snapshot.getChildren()) {
                    i++;

                    String key = ds.getKey();
                    String value = String.valueOf(ds.getValue());

                    cveReferences = cveReferences.concat(i + ". " + value + "\n\n");

                }

                Log.d(TAG, "cve references value is: " + cveReferences);
                referencesTextView.setText(cveReferences);

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read cve vector value.", error.toException());

            }
        });


        cveIOC.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                String cveIOC = "";
                int i = 0;

                for (DataSnapshot ds : snapshot.getChildren()) {

                    String CPE = ds.child("CPE").getValue(String.class);

                    DataSnapshot cveidrelated = ds.child("CVE_ID_Related");

                    for (DataSnapshot ds2:cveidrelated.getChildren()){

                        Log.v("cveinfo2","getkeyds2: "+ ds2.getKey()); //displays the key for the node
                        Log.v("cveinfo2","getvalueds2: "+ ds2.getValue());   //gives the value for each children

                        String key = ds2.getKey();
                        String value = String.valueOf(ds2.getValue());

                        if (value.equals(cveID)){
                            i++;
                            cveIOC = cveIOC.concat(i + ". " + CPE + "\n\n");
                        }


                    }

                    iocTextView.setText(cveIOC);

                }

//                Log.d(TAG, "IOC value is: " + cveReferences);
//                referencesTextView.setText(cveReferences);

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read cve vector value.", error.toException());

            }
        });

//        iocTextView.setText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. " +
//                "Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, " +
//                "when an unknown printer took a galley of type and scrambled it to make a type specimen book. " +
//                "It has survived not only five centuries, but also the leap into electronic typesetting, remaining " +
//                "essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing " +
//                "Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including " +
//                "versions of Lorem Ipsum.");
    }
}
