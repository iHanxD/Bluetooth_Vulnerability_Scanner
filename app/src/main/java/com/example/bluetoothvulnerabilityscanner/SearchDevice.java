package com.example.bluetoothvulnerabilityscanner;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SearchView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;


public class SearchDevice extends Fragment implements AdapterSearchDevice.OnItemListener{

    View root;
    Context context;

    private DatabaseReference UserEntryDatabase;
    AdapterSearchDevice adapterSearchDevice;
    ArrayList<DataSearchDevice> list;
    ArrayList<DataSearchDevice> searchedList;
    RecyclerView recyclerView;
    SearchView searchView;
    Button buttonalphabet;
    Button buttondate;
    Button buttonvulnerabilitycount;


    String AlphabetClick;
    String DateClick;
    String VulnerabilityCountClick;

    public SearchDevice() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        root = inflater.inflate(R.layout.fragment_search_device, container, false);

        FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");
        UserEntryDatabase = database.getReference("Users");

        context = container.getContext();

        recyclerView = root.findViewById(R.id.deviceRecycleView);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(context));

        searchView = root.findViewById(R.id.deviceSearchView);

//        radioGroup = findViewById(R.id.radioGroup);

        buttonalphabet = root.findViewById(R.id.sortbyalphabet);
        buttondate = root.findViewById(R.id.sortbydate);
        buttonvulnerabilitycount = root.findViewById(R.id.sortbyvulnerabilitycount);


        list = new ArrayList<>();

        AlphabetClick = buttonalphabet.getText().toString();
        DateClick = buttondate.getText().toString();
        VulnerabilityCountClick = buttonvulnerabilitycount.getText().toString();


        //get all the data of User Entries.
        if (UserEntryDatabase != null) {
            UserEntryDatabase.addValueEventListener(new ValueEventListener() {

                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    if (snapshot.exists()) {

                        list = new ArrayList<>();

                        for (DataSnapshot ds : snapshot.getChildren()) {

                            String userID = ds.getKey();
                            DataSnapshot scanResultsBranch = ds.child("scanresults");

                            for (DataSnapshot ds2 : scanResultsBranch.getChildren()) {

                            String userSubmissionID2 = ds2.getKey();
                            Log.v("userSubmissionID", userSubmissionID2);

                            String userSubmissionID = userID + "/scanresults/" + userSubmissionID2;


                            String manufacturer = ds2.child("manufacturer").getValue(String.class);
                            String model = ds2.child("model").getValue(String.class);

                            String manufacturerdmodel = manufacturer + " " + model;
                            String androidversion = ds2.child("release").getValue(String.class);
                            String chipset = ds2.child("chipset").getValue(String.class);

                            String socmodel = ds2.child("socmodel").getValue(String.class);
                            String socmanufacturer = ds2.child("socmanufacturer").getValue(String.class);

                            String socmanufacturermodel = socmodel + ", " + socmanufacturer;

                            if (chipset.equals("unknown")){chipset = socmanufacturermodel;}

                            Long dateofscan = ds2.child("date").getValue(Long.class);

                            //default to 0 first. Will add up in the next part.
                            int vulnerabilityCount = 0;

                            //not all will have vulnerabilities as such default as 0 above.
                            DataSnapshot Branch = ds2.child("vulnerabilities");

                            Long vulnerabilityCountHolder = Branch.getChildrenCount();

                            vulnerabilityCount = vulnerabilityCountHolder.intValue();

                                list.add(new DataSearchDevice(userSubmissionID, manufacturerdmodel, androidversion, chipset, dateofscan, vulnerabilityCount));

                            }
                        }

                            //fill up the searched array with values by searching something.
                            String searchText = "";
                            search(searchText);
                            Log.v("deviceNameOnStart", "empty");


                    }

                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {
                    Log.d("SearchDevices", "DATABASE ERROR", error.toException());
                }
            });

        }


        if (searchView != null) {

            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                @Override
                public boolean onQueryTextSubmit(String searchText) {
                    return false;
                }

                @Override
                public boolean onQueryTextChange(String searchText) {

                    //searchText can never be null at the start to prevent errors
                    if (searchText.equals(null)){
                        searchText = "";
                    }

                    search(searchText);
                    return true;
                }
            });
        }

        return root;

    }


    @Override
    public void onItemClick(int position) {

        String userSubmissionID = searchedList.get(position).getuserSubmissionID();

        Log.d("onItemClick", userSubmissionID);

        Intent intent = new Intent(context, SearchDeviceResult.class);
        intent.putExtra("userSubmissionID", userSubmissionID);
        startActivity(intent);

    }

    public void search(String searchText) {

        Log.v("SEARCHFUNCTION:", "called");

        searchedList = new ArrayList<>();

        for (int i = 0; i < list.size(); i++) {

            String manufacturermodel = list.get(i).getManufacturerModel();

            if (manufacturermodel != null) {
                Log.d("manufacturermodel", manufacturermodel);

                if (manufacturermodel.toLowerCase().contains(searchText.toLowerCase())) {
                    searchedList.add(list.get(i));

                    Log.d("myListSize", String.valueOf(searchedList.size()));
                }

            } else {
                Log.d("brandmodelname", "empty");
            }
        }

        adapterSearchDevice = new AdapterSearchDevice(context, searchedList, this);
        recyclerView.setAdapter(adapterSearchDevice);
        adapterSearchDevice.notifyDataSetChanged();

        buttonalphabet.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                AlphabetClick = buttonalphabet.getText().toString();

                if (AlphabetClick.equals("A-Z")) {

                    buttonalphabet.setText("Z-A");
                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override

                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {
                            return t1.getManufacturerModel().compareTo(dataSearchDevice.getManufacturerModel());
                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();

                }else if(AlphabetClick.equals("Z-A")){

                    buttonalphabet.setText("A-Z");

                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override
                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {
                            return dataSearchDevice.getManufacturerModel().compareTo(t1.getManufacturerModel());
                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();
                }
            }
        });

        buttondate.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                DateClick = buttondate.getText().toString();

                if (DateClick.equals("Newest")) {

                    buttondate.setText("Oldest");
                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override
                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {

                            Long date1 = dataSearchDevice.getDate();
                            Long date2 = t1.getDate();

                            return date1.compareTo(date2);
                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();

                }else if(DateClick.equals("Oldest")){

                    buttondate.setText("Newest");

                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override

                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {
                            Long date1 = dataSearchDevice.getDate();
                            Long date2 = t1.getDate();

                            return date2.compareTo(date1);

                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();
                }
            }
        });

        buttonvulnerabilitycount.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                VulnerabilityCountClick = buttonvulnerabilitycount.getText().toString();

                if (VulnerabilityCountClick.equals("Highest")) {

                    buttonvulnerabilitycount.setText("Lowest");
                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override
                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {
                            return dataSearchDevice.getVulnerabilities().compareTo(t1.getVulnerabilities());
                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();

                }else if(VulnerabilityCountClick.equals("Lowest")){

                    buttonvulnerabilitycount.setText("Highest");

                    Collections.sort(searchedList, new Comparator<DataSearchDevice>() {
                        @Override
                        public int compare(DataSearchDevice dataSearchDevice, DataSearchDevice t1) {
                            return t1.getVulnerabilities().compareTo(dataSearchDevice.getVulnerabilities());
                        }
                    });

                    adapterSearchDevice.notifyDataSetChanged();
                }
            }
        });

    }


    public String dateconverter(Long date) {

            String dateFormat = "dd/MM/yyyy hh:mm:ss.SSS";
            SimpleDateFormat formatter = new SimpleDateFormat(dateFormat);
            Calendar calendar = Calendar.getInstance();
            calendar.setTimeInMillis(date);
            return formatter.format(calendar.getTime());
    }

}