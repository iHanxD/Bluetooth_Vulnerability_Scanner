package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;

import com.google.android.material.navigation.NavigationView;
import com.google.firebase.auth.FirebaseAuth;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener
{
    private DrawerLayout drawer;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //check if network available. If not, dont load anything and prompt user to get internet.

        if (!isNetworkAvailable()) {

            Toast.makeText(MainActivity.this, "Network Not Available. Please connect to a stable and active network.", Toast.LENGTH_LONG).show();

        } else {

            Toast.makeText(MainActivity.this, "Network Available", Toast.LENGTH_SHORT).show();

            Toolbar toolbar = findViewById(R.id.toolbar);
            setSupportActionBar(toolbar);

            drawer = findViewById(R.id.drawerLayout);
            NavigationView navigationView = findViewById(R.id.nav_view);
            navigationView.setNavigationItemSelectedListener(this);

            ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar,
                    R.string.navigation_drawer_open, R.string.navigation_drawer_close);

            drawer.addDrawerListener(toggle);
            toggle.syncState();

            if (savedInstanceState == null) {
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
                        new fragmentAbout()).commit();

            }
        }
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        //return true when item is clicked

        Intent i;

        switch (item.getItemId()){
            case R.id.ScanDevice:
                i = new Intent(this, ScanDevice.class);
                startActivity(i);
                break;

            case R.id.ScanNearbyDevices:
                i = new Intent(this, ScanAroundDevices.class);
                startActivity(i);
                break;

            case R.id.SearchDeviceNames:
                i = new Intent(this, Search.class);
                startActivity(i);
                break;

            case R.id.AttackDemo:
                i = new Intent(this, PocDemo.class);
//                i = new Intent(this, DisplayPocDemo.class);
                startActivity(i);
                break;

            case R.id.Tips:
//                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
//                        new fragmentTips()).commit();
//                break;
                i = new Intent(this, TipsInfo.class);
                startActivity(i);
                break;

            case R.id.About:
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
                        new fragmentAbout()).commit();
                break;

            case R.id.Game:
                i = new Intent(this, QuizGameLoad.class);
                startActivity(i);
                break;



        }

        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    //when press on backpress, we dont want to leave the activity immediately, instead we want to close the navigation drawer

    public void onBackPressed() {
        if (drawer.isDrawerOpen(GravityCompat.START)){
            drawer.closeDrawer(GravityCompat.START);
        }else{
            super.onBackPressed();
        }

    }

    //check if device has access to internet !!! NOT FULL read here
    // https://stackoverflow.com/questions/6493517/detect-if-android-device-has-internet-connection'

    public boolean isNetworkAvailable() {

        try{
            ConnectivityManager manager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo networkInfo = null;

            if(manager != null){
                networkInfo = manager.getActiveNetworkInfo();
            }
            return networkInfo != null && networkInfo.isConnected();
        } catch (NullPointerException e){
            return false;
        }
    }

    //Store this at where
    public void logout (View view) {
        FirebaseAuth.getInstance().signOut();
        startActivity(new Intent(getApplicationContext(), RegisterPage.class));
        finish();
    }


}

