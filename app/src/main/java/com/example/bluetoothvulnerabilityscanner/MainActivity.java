package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.material.navigation.NavigationView;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener
{
    private static final String TAG = "MainActivity";
    private DrawerLayout drawer;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        TextView usernameTV;
        TextView emailTV;
        TextView emailverifyTV;
        TextView resendemailverifyTV;

        //check if network available. If not, dont load anything and prompt user to get internet.

        if (!isNetworkAvailable()) {

            Toast.makeText(MainActivity.this, "Network Not Available. Please connect to a stable and active network.", Toast.LENGTH_LONG).show();

        } else {

            Toast.makeText(MainActivity.this, "Network Available", Toast.LENGTH_SHORT).show();

            Toolbar toolbar = findViewById(R.id.toolbar);
            setSupportActionBar(toolbar);

            //defining navigationview & drawer
            drawer = findViewById(R.id.drawerLayout);
            NavigationView navigationView = findViewById(R.id.nav_view);
            navigationView.setNavigationItemSelectedListener(this);

            Menu nav_Menu = navigationView.getMenu();

            //navigation drawer toggles
            ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar,
                    R.string.navigation_drawer_open, R.string.navigation_drawer_close);

            drawer.addDrawerListener(toggle);
            toggle.syncState();

            if (savedInstanceState == null) {
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
                        new fragmentAbout()).commit();

            }

            //defining the nav_header elements
            View headerView = navigationView.getHeaderView(0);
            usernameTV = headerView.findViewById(R.id.usernameHeader);
            emailTV = headerView.findViewById(R.id.emailHeader);
            emailverifyTV = headerView.findViewById(R.id.emailverify);
            resendemailverifyTV = headerView.findViewById(R.id.emailresendverify);

            //set it as invisble first
            emailverifyTV.setVisibility(View.INVISIBLE);
            resendemailverifyTV.setVisibility(View.INVISIBLE);

            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
            if (user != null) {

                // The user's ID, unique to the Firebase project. Do NOT use this value to
                // authenticate with your backend server, if you have one. Use
                // FirebaseUser.getIdToken() instead.
                String uid = user.getUid();

                // username and email address
                String email = user.getEmail();
                String username = user.getDisplayName();

                if(email!=null) {
                    emailTV.setText(email);
                }

                if (username != null){
                    usernameTV.setText(username);
                }

                // Check if user's email is verified
                boolean emailVerified = user.isEmailVerified();



                if(!emailVerified){
                    emailverifyTV.setVisibility(View.VISIBLE);
                    resendemailverifyTV.setVisibility(View.VISIBLE);

                    resendemailverifyTV.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            user.sendEmailVerification().addOnSuccessListener(new OnSuccessListener<Void>() {
                                @Override
                                public void onSuccess(Void aVoid) {
                                    Toast.makeText(MainActivity.this, "Verification email has been sent. Please check SPAM emails aswell.",Toast.LENGTH_SHORT).show();

                                }
                            }).addOnFailureListener(new OnFailureListener() {
                                @Override
                                public void onFailure(@NonNull Exception e) {
                                    Log.v(TAG, "onFailure: Email not sent" + e.getMessage());

                                }
                            });
                        }
                    });
                }

                //hide these menu items if user is logged in and show logout
                nav_Menu.findItem(R.id.Register).setVisible(false);
                nav_Menu.findItem(R.id.Login).setVisible(false);
                nav_Menu.findItem(R.id.Logout).setVisible(true);

            }

        }

    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        //return true when item is clicked

        Intent i;

        switch (item.getItemId()){
            case R.id.ScanDevice:
                i = new Intent(this, ScanDevice.class);
                startActivity(i);
                break;


            case R.id.ScanNearbyDevices:
                i = new Intent(this, ScanAroundDevices.class);
                startActivity(i);
                break;


            case R.id.SearchDeviceNames:
                i = new Intent(this, Search.class);
                startActivity(i);
                break;

            case R.id.AttackDemo:
                i = new Intent(this, PocDemo.class);
                startActivity(i);
                break;

            case R.id.Tips:
                i = new Intent(this, TipsInfo.class);
                startActivity(i);
                break;

            case R.id.About:
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
                        new fragmentAbout()).commit();
                break;

            case R.id.Game:
                i = new Intent(this, QuizGameLoad.class);
                startActivity(i);
                break;

            case R.id.Register:
                i = new Intent(this, RegisterPage.class);
                startActivity(i);
                break;

            case R.id.Login:
                i = new Intent(this, LoginPage.class);
                startActivity(i);
                break;


                //if click on logout item menu, log out the user
            case R.id.Logout:
                FirebaseAuth.getInstance().signOut();
                startActivity(new Intent(getApplicationContext(), MainActivity.class));
                Toast.makeText(MainActivity.this, "Logged out", Toast.LENGTH_SHORT).show();
                finish();
                break;

        }

        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    //when press on backpress, we dont want to leave the activity immediately, instead we want to close the navigation drawer

    public void onBackPressed() {
        if (drawer.isDrawerOpen(GravityCompat.START)){
            drawer.closeDrawer(GravityCompat.START);
        }else{
            super.onBackPressed();
        }

    }

    //check if device has access to internet !!! NOT FULL read here
    // https://stackoverflow.com/questions/6493517/detect-if-android-device-has-internet-connection'

    public boolean isNetworkAvailable() {

        try{
            ConnectivityManager manager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo networkInfo = null;

            if(manager != null){
                networkInfo = manager.getActiveNetworkInfo();
            }
            return networkInfo != null && networkInfo.isConnected();
        } catch (NullPointerException e){
            return false;
        }
    }

}

