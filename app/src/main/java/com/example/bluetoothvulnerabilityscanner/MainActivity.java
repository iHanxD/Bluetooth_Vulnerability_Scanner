package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;

import com.google.android.material.navigation.NavigationView;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener
//        implements View.OnClickListener
{

    public CardView card1, card2, card3;
    private DrawerLayout drawer;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if(isNetworkAvailable()){
            Toast.makeText(MainActivity.this, "Network Available", Toast.LENGTH_SHORT).show();
        }else{
            Toast.makeText(MainActivity.this, "Network Not Available. Please connect to a stable and active network.", Toast.LENGTH_SHORT).show();
        }

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        drawer = findViewById(R.id.drawerLayout);
        NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar,
                R.string.navigation_drawer_open, R.string.navigation_drawer_close);

        drawer.addDrawerListener(toggle);
        toggle.syncState();

        if (savedInstanceState == null){
        getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,
                new fragmentAbout()).commit();

//        navigationView.setCheckedItem(R.id.ScanDevice);

        }


        //defining cards
//        card1 = (CardView) findViewById(R.id.scanDeviceCard);
//        card2 = (CardView) findViewById(R.id.scanAroundDevicesCard);
//        card3 = (CardView) findViewById(R.id.searchDeviceModelsCard);
//
//        card1.setOnClickListener(this);
//        card2.setOnClickListener(this);
//        card3.setOnClickListener(this);

    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        //return true when item is clicked

        Intent i;

        switch (item.getItemId()){
            case R.id.ScanDevice:
                i = new Intent(this, ScanDevice.class);
                startActivity(i);
                break;

            case R.id.ScanNearbyDevices:
                i = new Intent(this, MainActivity2.class);
                startActivity(i);
                break;

            case R.id.SearchDeviceNames:
                i = new Intent(this, SearchDevices.class);
                startActivity(i);
                break;

            case R.id.Tips:

                break;

            case R.id.AttackDemo:

                break;


        }

        drawer.closeDrawer(GravityCompat.START);

        return true;
    }

    @Override
    //when press on backpress, we dont want to leave the activity immediately, instead we want to close the navigation drawer

    public void onBackPressed() {
        if (drawer.isDrawerOpen(GravityCompat.START)){
            drawer.closeDrawer(GravityCompat.START);
        }else{
            super.onBackPressed();
        }

    }

    //    @Override
//    public void onClick(View view) {
//        Intent i;
//
//        switch(view.getId()) {
//            case R.id.scanDeviceCard:
//                i = new Intent(this, ScanDevice.class);
//                startActivity(i);
//                break;
//
//            //add other cases for the other cards
//
////            delete after
//            case R.id.scanAroundDevicesCard:
//                i = new Intent(this, MainActivity2.class);
//                startActivity(i);
//                break;
//
//            case R.id.searchDeviceModelsCard:
//                i = new Intent(this, SearchDevices.class);
//                startActivity(i);
//                break;
//        }
//
//    }



    //kenji was here

    //check if device has access to internet !!! NOT FULL read here
    // https://stackoverflow.com/questions/6493517/detect-if-android-device-has-internet-connection'

    public boolean isNetworkAvailable() {

        try{
            ConnectivityManager manager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo networkInfo = null;

            if(manager != null){
                networkInfo = manager.getActiveNetworkInfo();
            }
            return networkInfo != null && networkInfo.isConnected();
        } catch (NullPointerException e){
            return false;
        }
    }


//    public boolean isNetworkAvailable() {
//
//
//        try {
////            URL url = new URL("https://google.com");
////            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
////            connection.setConnectTimeout(10000);
////            connection.connect();
////            success = connection.getResponseCode() == 200;
//
//            URL url = new URL("https://google.com");
//            HttpURLConnection urlc = (HttpURLConnection) url.openConnection();
//            urlc.setRequestProperty("User-Agent", "Android");
//            urlc.setRequestProperty("Connection", "close");
//            urlc.setConnectTimeout(1500);
//            urlc.connect();
//            Log.d("MainActivity", "Error checking internet connection");
//            return (urlc.getResponseCode() == 200);
//
//        } catch (IOException e) {
//            Log.e("MainActivity", "Error checking internet connection", e);
//        }
//        return false;
//    }

}

