package com.example.bluetoothvulnerabilityscanner;

import android.app.ListActivity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;

import androidx.annotation.RequiresApi;
import java.util.ArrayList;


public class FoundBTDevices {

}

    public class FoundBTDevices extends ListActivity{

        private ArrayList<BluetoothObject> arrayOfFoundBTDevices;

        @Override
        protected void onCreate(Bundle savedInstanceState)
        {
            super.onCreate(savedInstanceState);

            if (!havePermissions()) {
                Log.d("TAG", "Requesting permissions needed for this app.");
                requestPermissions();
            }

            IntentFilter bluetoothFilter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
            registerReceiver(mReceiver, bluetoothFilter);
            final BluetoothAdapter mBluetoothAdapter =
                    BluetoothAdapter.getDefaultAdapter();
            mBluetoothAdapter.startDiscovery();


        }


        // Create a BroadcastReceiver for ACTION_FOUND
        private final BroadcastReceiver mReceiver = new BroadcastReceiver()
        {

            @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
            @Override
            public void onReceive(Context context, Intent intent)
            {
                arrayOfFoundBTDevices = new ArrayList<BluetoothObject>();

                // start looking for bluetooth devices
                mBluetoothAdapter.startDiscovery();

                Log.d("TAG","This is onReceive()");
                String action = intent.getAction();
                // When discovery finds a device
                if (BluetoothDevice.ACTION_FOUND.equals(intent.getAction()))
                {
                    // Get the bluetoothDevice object from the Intent
                    BluetoothDevice device =
                            intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);

                    // Get the "RSSI" to get the signal strength as
                    integer,
                    // but should be displayed in "dBm" units
                    int rssi =
                            intent.getShortExtra(BluetoothDevice.EXTRA_RSSI,Short.MIN_VALUE);

                    // Create the device object and add it to the
                    arrayList of devices
                    BluetoothObject bluetoothObject = new
                            BluetoothObject();
                    bluetoothObject.setBluetooth_name(device.getName());

                    bluetoothObject.setBluetooth_address(device.getAddress());

                    bluetoothObject.setBluetooth_state(device.getBondState());
                    bluetoothObject.setBluetooth_type(device.getType());
                    // requires API 18 or higher
                    bluetoothObject.setBluetooth_uuids(device.getUuids());
                    bluetoothObject.setBluetooth_rssi(rssi);

                    arrayOfFoundBTDevices.add(bluetoothObject);

                    // 1. Pass context and data to the custom adapter
                    FoundBTDevicesAdapter adapter = new
                            FoundBTDevicesAdapter(getApplicationContext(), arrayOfFoundBTDevices);

                    // 2. setListAdapter
                    setListAdapter(adapter);
                }
            }
        };


        private boolean havePermissions() {
            return ContextCompat.checkSelfPermission(this,
                    Manifest.permission.ACCESS_FINE_LOCATION)
                    == PackageManager.PERMISSION_GRANTED;
        }
        private void requestPermissions() {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                    PERMISSIONS_REQUEST_CODE);
            Log.d("TAG", "requestPermissions");
        }

        @Override
        protected void onPause() {
            super.onPause();
            mBluetoothAdapter.cancelDiscovery();
        }
    }

