package com.example.bluetoothvulnerabilityscanner;

import android.content.Intent;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;


public class fragment3 extends Fragment {


    private SearchDeviceResult activity;


    FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");
    private DatabaseReference USERSUBMISSIONDatabase;

    View root;


    TextView modelValue;
    TextView manufacturerValue;
    TextView basebandValue;
    TextView buildnumberValue;
    TextView buildfingerprintValue;
    TextView bootloaderValue;
    TextView osversionValue;
    TextView sdkValue;
    TextView cpuarchitectureValue;
    TextView boardValue;
    TextView hardwareValue;
    TextView chipsetValue;
    TextView socmodelValue;
    TextView socmanufacturerValue;
    TextView coresValue;
    TextView instructionsetsValue;
    TextView cpufeaturesValue;


    String userSubmissionID;
    public ArrayList<HashMap<DatabaseReference, TextView>> fillupholder = new ArrayList<HashMap<DatabaseReference, TextView>>();

    private static final String TAG = "fragment3";

    public fragment3() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        activity = (SearchDeviceResult) getActivity();
        userSubmissionID = activity.getUserSubmissionID();
        Log.v("userSubmissionIDfrag", userSubmissionID);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment

        root = inflater.inflate(R.layout.fragment_fragment3, container, false);

        modelValue = root.findViewById(R.id.modelValue);
        manufacturerValue = root.findViewById(R.id.manufacturerValue);
        basebandValue = root.findViewById(R.id.basebandValue);
        buildnumberValue = root.findViewById(R.id.buildnumberValue);
        buildfingerprintValue = root.findViewById(R.id.buildfingerprintValue);
        bootloaderValue = root.findViewById(R.id.bootloaderValue);
        osversionValue = root.findViewById(R.id.osversionValue);
        sdkValue = root.findViewById(R.id.sdkValue);
        cpuarchitectureValue = root.findViewById(R.id.cpuarchitectureValue);
        boardValue = root.findViewById(R.id.boardValue);
        hardwareValue = root.findViewById(R.id.hardwareValue);
        chipsetValue = root.findViewById(R.id.chipsetValue);
        socmodelValue = root.findViewById(R.id.socmodelValue);
        socmanufacturerValue = root.findViewById(R.id.socmanufacturerValue);
        coresValue = root.findViewById(R.id.coresValue);
        instructionsetsValue = root.findViewById(R.id.instructionsetsValue);
        cpufeaturesValue = root.findViewById(R.id.cpufeaturesValue);


        getUserSubmissionInfo(userSubmissionID);

        return root;
    }


    public void getUserSubmissionInfo(String userSubmissionID) {

        DatabaseReference userEntryPath = database.getReference("User_Entry/" + userSubmissionID);

        userEntryPath.addListenerForSingleValueEvent(new ValueEventListener() {

            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                if (snapshot.exists()) {

                    Log.v(TAG, "firebaseSOC: snapshot exist"); //displays the key for the node

                    for (DataSnapshot ds : snapshot.getChildren()) {

                        String key = ds.getKey();

                        Class type = ds.getValue().getClass();

                        //only allow string types. Vulnerability branch is considered an array list!
                        if (type == String.class) {

                            String value = ds.getValue(String.class);

                            Log.v("fragment3ds", key + " : " + value);

                            if (key.equals("model")) {modelValue.setText(value);}

                            if (key.equals("manufacturer")) {manufacturerValue.setText(value);}

                            if (key.equals("radio")) {basebandValue.setText(value);}

                            if (key.equals("display")) {buildnumberValue.setText(value);}

                            if (key.equals("fingerprint")) {buildfingerprintValue.setText(value);}

                            if (key.equals("bootloader")) {bootloaderValue.setText(value);}

                            if (key.equals("release")) {osversionValue.setText(value);}

                            if (key.equals("sdk_Int")) {sdkValue.setText(value);}

                            if (key.equals("cpuarchitecture")) {cpuarchitectureValue.setText(value);}

                            if (key.equals("board")) {boardValue.setText(value);}

                            if (key.equals("hardware")) {hardwareValue.setText(value);}

                            if (key.equals("chipset")) {chipsetValue.setText(value);}

                            if (key.equals("socmodel")) {socmodelValue.setText(value);}

                            if (key.equals("socmanufacturer")) {socmanufacturerValue.setText(value);}

                            if (key.equals("numberofcores")) {coresValue.setText(value);}

                            if (key.equals("supportedabis")) {instructionsetsValue.setText(value);}

                            if (key.equals("cpufeatures")) {cpufeaturesValue.setText(value);}
                        }
                    }


                }

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.d(TAG, "DATABASE ERROR", error.toException());
            }
        });


    }

}


