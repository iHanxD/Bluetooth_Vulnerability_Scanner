package com.example.bluetoothvulnerabilityscanner;

import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.SystemClock;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.util.Locale;

public class QuizGame1 extends AppCompatActivity implements View.OnClickListener {

    TextView totalQuestionsTextView;
    TextView questionTextView;
    Button ansA, ansB, ansC, ansD;
    Button submitBtn;

    int score = 0;
    int totalQuestion = tp.edu.sg.qgames.QuestionAnswer.question.length;
    int currentQuestionIndex = 0;
    String selectedAnswer = "";

    private static final long COUNTDOWN_IN_MILLIS = 30000;
    private TextView textViewCountDown;
    private ColorStateList textColorDefaultCd;
    private CountDownTimer countDownTimer;
    private long timeLeftInMillis;
    private TextView tvresult;
    private TextView tvresult2;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_quiz_game1);

        totalQuestionsTextView = findViewById(R.id.total_question);
        questionTextView = findViewById(R.id.question);
        ansA = findViewById(R.id.ans_A);
        ansB = findViewById(R.id.ans_B);
        ansC = findViewById(R.id.ans_C);
        ansD = findViewById(R.id.ans_D);
        tvresult2 = findViewById(R.id.tvResult2);
        submitBtn = findViewById(R.id.submit_btn);
        textViewCountDown = findViewById(R.id.textViewCountDown);

        textColorDefaultCd = textViewCountDown.getTextColors();

        ansA.setOnClickListener(this);
        ansB.setOnClickListener(this);
        ansC.setOnClickListener(this);
        ansD.setOnClickListener(this);
        submitBtn.setOnClickListener(this);

        totalQuestionsTextView.setText("Total questions : " + totalQuestion);

        loadNewQuestion();
    }

    @Override
    public void onClick(View view) {
        ansA.setTextColor(Color.BLACK);
        ansB.setTextColor(Color.BLACK);
        ansC.setTextColor(Color.BLACK);
        ansD.setTextColor(Color.BLACK);


        Button clickedButton = (Button) view;
        if (clickedButton.getId() == R.id.submit_btn) {

            countDownTimer.cancel();
            currentQuestionIndex++;
            loadNewQuestion();

        } else {
            selectedAnswer = clickedButton.getText().toString();
            if (selectedAnswer.equals(tp.edu.sg.qgames.QuestionAnswer.correctAnswers[currentQuestionIndex])) {
                score++;
                clickedButton.setTextColor(Color.GREEN);
                ansA.setEnabled(false);
                ansB.setEnabled(false);
                ansC.setEnabled(false);
                ansD.setEnabled(false);
                tvresult2.setText("Correct");
            } else {
                clickedButton.setTextColor(Color.RED);
                tvresult2.setText("Ans: " + tp.edu.sg.qgames.QuestionAnswer.correctAnswers[currentQuestionIndex]);
                ansA.setEnabled(false);
                ansB.setEnabled(false);
                ansC.setEnabled(false);
                ansD.setEnabled(false);
            }
        }
    }

    void loadNewQuestion() {

        if (currentQuestionIndex == totalQuestion) {
            finishQuiz();
            return;
        }

        tvresult2.setText("");

        ansA.setEnabled(true);
        ansB.setEnabled(true);
        ansC.setEnabled(true);
        ansD.setEnabled(true);

        questionTextView.setText(tp.edu.sg.qgames.QuestionAnswer.question[currentQuestionIndex]);
        ansA.setText(tp.edu.sg.qgames.QuestionAnswer.choices[currentQuestionIndex][0]);
        ansB.setText(tp.edu.sg.qgames.QuestionAnswer.choices[currentQuestionIndex][1]);
        ansC.setText(tp.edu.sg.qgames.QuestionAnswer.choices[currentQuestionIndex][2]);
        ansD.setText(tp.edu.sg.qgames.QuestionAnswer.choices[currentQuestionIndex][3]);

        timeLeftInMillis = COUNTDOWN_IN_MILLIS;
        startCountDown();

    }

    void startCountDown() {
        countDownTimer = new CountDownTimer(timeLeftInMillis, 1000) {
            @Override
            public void onTick(long millisUntilFinished) {
                timeLeftInMillis = millisUntilFinished;
                updateCountDownText();

            }

            @Override
            public void onFinish() {
                timeLeftInMillis = 0;
                updateCountDownText();
                countDownTimer.cancel();
                currentQuestionIndex++;
                loadNewQuestion();
            }
        }.start();
    }

    void updateCountDownText() {
        int minutes = (int) (timeLeftInMillis / 1000) / 60;
        int seconds = (int) (timeLeftInMillis / 1000) % 60;

        String timeFormatted = String.format(Locale.getDefault(), "%02d:%02d", minutes, seconds);

        textViewCountDown.setText(timeFormatted);

        if (timeLeftInMillis < 10000) {
            textViewCountDown.setTextColor(Color.RED);
        } else {
            textViewCountDown.setTextColor(textColorDefaultCd);
        }
    }

    void finishQuiz() {
        String passStatus = "";
        countDownTimer.cancel();
        if (score > totalQuestion * 0.40) {
            passStatus = "You've passed the quiz! CONGRATULATIONS!";
        } else {
            passStatus = "You've failed the quiz! TRY AGAIN NEXT TIME!";
        }

        new AlertDialog.Builder(this)
                .setTitle(passStatus)
                .setMessage("Your score is " + score + " out of " + totalQuestion)
                .setPositiveButton("Restart", (dialogInterface, i) -> restartQuiz())
                .setCancelable(false)
                .show();
    }

    void restartQuiz() {
        score = 0;
        currentQuestionIndex = 0;
        loadNewQuestion();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (countDownTimer != null) {
            countDownTimer.cancel();
        }
    }
}