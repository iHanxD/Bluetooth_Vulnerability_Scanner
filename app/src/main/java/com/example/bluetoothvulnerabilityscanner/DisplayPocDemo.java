package com.example.bluetoothvulnerabilityscanner;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.os.Bundle;
import android.text.Html;
import android.text.method.LinkMovementMethod;
import android.util.Log;
import android.widget.TextView;

import com.denzcoskun.imageslider.ImageSlider;
import com.denzcoskun.imageslider.models.SlideModel;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import org.w3c.dom.Text;

import java.util.ArrayList;

public class DisplayPocDemo extends AppCompatActivity{

    private static final String TAG = "DisplayDemo";



    //Database link instance
    FirebaseDatabase database = FirebaseDatabase.getInstance("https://bluetoothvulnscannerdb-default-rtdb.asia-southeast1.firebasedatabase.app");

    ImageSlider imageSlider;
    TextView textTitleView;
    TextView textVideoLink;
    TextView textBgInfo;
    TextView textType;
    ArrayList<DataPocDemoInfo> list;
    RecyclerView recyclerView;
    AdapterPocDemoInfo adapterdemoinfo;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_display_demo);

        setTitle("Poc Demo");

        Intent intent = getIntent();
        String pocdemoid = intent.getStringExtra("pocdemoid");

        recyclerView = findViewById(R.id.textContentRV);
        imageSlider = findViewById(R.id.image_slider);
        textTitleView = findViewById(R.id.textTitle);
        textBgInfo = findViewById(R.id.backgroundinfo);
        textVideoLink = findViewById(R.id.videoLink);

        textType = findViewById(R.id.textType);


        ArrayList<SlideModel> slideModels = new ArrayList<>();
        imageSlider.setImageList(slideModels);

        list = new ArrayList<>();
        adapterdemoinfo = new AdapterPocDemoInfo(this, list);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(adapterdemoinfo);
        recyclerView.setNestedScrollingEnabled(false);

        DatabaseReference pocdemotitle = database.getReference("Poc_Demo/" + pocdemoid + "/title");
        DatabaseReference pocdemovideolink = database.getReference("Poc_Demo/" + pocdemoid + "/video");
        DatabaseReference pocdemotype = database.getReference("Poc_Demo/" + pocdemoid + "/type");
        DatabaseReference pocbginfo = database.getReference("Poc_Demo/" + pocdemoid + "/backgroundinfo");
        DatabaseReference pocdemocontent = database.getReference("Poc_Demo/" + pocdemoid + "/content");
        DatabaseReference pocdemoimages = database.getReference("Poc_Demo/" + pocdemoid + "/images");

        pocdemotitle.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String title = snapshot.getValue(String.class);

                if(title!=null){
                Log.d(TAG, "Title value is: " + title);
                textTitleView.setText(title);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read title value.", error.toException());

            }
        });

        pocdemovideolink.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String link = snapshot.getValue(String.class);
                if(link!=null) {
                    Log.d(TAG, "Video Link value is: " + link);
                    textVideoLink.setText("Video Demo Link: " + link);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read title value.", error.toException());

            }
        });

        pocdemotype.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String type = snapshot.getValue(String.class);
                if(type!=null) {
                    Log.d(TAG, "Type: " + type);
                    textType.setText("Type: " + type);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read title value.", error.toException());

            }
        });

        pocbginfo.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String bginfo = snapshot.getValue(String.class);
                if(bginfo!=null) {
                    Log.d(TAG, "Type: " + bginfo);
                    textBgInfo.setText(bginfo);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read title value.", error.toException());

            }
        });

        pocdemocontent.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                if (snapshot.exists()) {
                    for (DataSnapshot ds : snapshot.getChildren()) {

                        String subtitle = ds.child("subtitle").getValue(String.class);

                        String subtitleinfo = ds.child("value").getValue(String.class);

                        Log.d(TAG, "subtitle is: " + subtitle);
                        Log.d(TAG, "value is: " + subtitleinfo);

                        list.add(new DataPocDemoInfo(subtitle, subtitleinfo));
                    }

                    adapterdemoinfo.notifyDataSetChanged();
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to read pocdemocontent value.", error.toException());

            }
        });


        pocdemoimages.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                if (snapshot.exists()) {
                    for (DataSnapshot ds : snapshot.getChildren()) {
                        String key = ds.getKey();

                        Class type = ds.getValue().getClass();
                        if (type == String.class) {

                            String linkvalue = ds.getValue(String.class);

                            Log.v(TAG, "imagekey: " + key); //displays the key for the node
                            Log.v(TAG, "imagelink: " + linkvalue); //displays the key for the node

                            if(linkvalue!=null){
                                slideModels.add(new SlideModel(linkvalue,null));
                            }

                        }
                            imageSlider.setImageList(slideModels);
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Failed to read description value
                Log.w(TAG, "Failed to imagelink value.", error.toException());

            }
        });

    }
}