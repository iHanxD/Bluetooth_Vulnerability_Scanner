package com.example.bluetoothvulnerabilityscanner;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdSize;
import com.google.android.gms.ads.AdView;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.ads.initialization.InitializationStatus;
import com.google.android.gms.ads.initialization.OnInitializationCompleteListener;

import java.util.Locale;
import java.util.concurrent.TimeUnit;

public class Play_Activity extends AppCompatActivity {

    private TextView tv_score, tv_noOfQues, tvTime, tv_question;
    private Button next_button;
    private RadioGroup radio_g;
    private RadioButton rb1, rb2, rb3, rb4;

    //    timer
    private CountDownTimer countDownTimer;
    public static final long COUNT_DOWN_IN_MILLIS = 30000;
    private static final long COUNT_DOWN_INTERVAL = 1000;
    private long timeLeft_milliseconds;
    private ColorStateList default_color;

    //    ads
    private FrameLayout adContainerView;
    private AdView adView;

    //    ques & and
    public static int score = 0, correct = 0, wrong = 0, skip = 0;
    int qIndex = 0;
    int update_que_no = 1;

    //    String array for Ques, ans, options
    String[] questions =
            {
                    "Qn 1. What Does Bluetooth Do?",
                    "Qn 2. Where is BLE (Bluetooth Low Energy) mostly used in?",
                    "Qn 3. What is the major concern in using Bluetooth?",
                    "Qn 4. What is the range of BLE?",
                    "Qn 5. Which gadget uses Bluetooth most common?",
                    "Qn 6. How many Bluetooth versions are there as of 2022?",
                    "Qn 7. What did Braktooth cover?",
                    "Qn 8. What can attackers get by hacking via Bluetooth?",
                    "Qn 9. What kind of Bluetooth is your Mobile phone using?",
                    "Qn 10. How to protect yourself better against Bluetooth attacks?",
            };
    String[] answers =
            {
                    "Allows devices to communicate with each other wirelessly",
                    "Health Wellness",
                    "It can be hacked",
                    "0-50 meters",
                    "Wireless Headphones",
                    "5",
                    "Bluetooth Vulnerability",
                    "All of the above",
                    "Bluetooth Classic (BLC)",
                    "Update your device software",
            };

    String[] opt = {
            "Allows devices to communicate with each other wirelessly", "Connect to Wifi", "Purchase Stuff Online", "A Programming Language",
            "Phone Accessories", "Health Wellness", "Home Automation", "Peripherals",
            "Slow transfer rate", "Small range", "It can be hacked", "Everyone can see your device in discoverable mode",
            "0-50 meters", "50-100 meters", "100-200 meters", "more than 200 meters",
            "USB Dongle Mouse", "Digital Camera", "Wireless Headphones", "Microphone",
            "1", "3", "5", "7",
            "Bluetooth Usage", "Bluetooth Applications", "Bluetooth Functions", "Bluetooth Vulnerability",
            "Call logs", "SMS", "Remotely Controlling your device", "All of the above",
            "Bluetooth Classic (BLC)", "Bluetooth Low Energy (BLE)", "Bluetooth Modern (BLM)", "Bluetooth Technology (BLT)",
            "Uninstall unwanted applications", "Leave your device as it is", "Update your device software", "Perform memory cleanup",
    };

    @SuppressLint("SetTextI18n")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_play);

        initializeViews();


        MobileAds.initialize(this, initializationStatus -> {
        });

        adContainerView = findViewById(R.id.ad_view_container_ques);
        adContainerView.post(new Runnable() {
            @Override
            public void run() {
                loadBanner();
            }
        });

//        TODO < snkjfsjf fnskfnksn  ifjfjsifj jfsjdifj>
        next_button.setOnClickListener(new View.OnClickListener() {
            @SuppressLint("SetTextI18n")
            @Override
            public void onClick(View v) {

                if (radio_g.getCheckedRadioButtonId() == -1) {
                    Toast.makeText(Play_Activity.this, "Please select an option", Toast.LENGTH_SHORT).show();
                } else {
                    showNextQue();
                }

            }

        });
    }

    @SuppressLint("SetTextI18n")
    private void initializeViews() {
        tv_score = findViewById(R.id.score);
        tv_noOfQues = findViewById(R.id.tv_noOfQues);

        tvTime = findViewById(R.id.txtTime);
        next_button = findViewById(R.id.button3);
        tv_question = findViewById(R.id.tv_que);

        radio_g = findViewById(R.id.answersgrp);
        rb1 = findViewById(R.id.radioButton);
        rb2 = findViewById(R.id.radioButton2);
        rb3 = findViewById(R.id.radioButton3);
        rb4 = findViewById(R.id.radioButton4);

        tv_noOfQues.setText(update_que_no + "/10");
        tv_question.setText(questions[qIndex]);

        rb1.setText(opt[0]);
        rb2.setText(opt[1]);
        rb3.setText(opt[2]);
        rb4.setText(opt[3]);

        default_color = tvTime.getTextColors();


        timeLeft_milliseconds = COUNT_DOWN_IN_MILLIS;

        startCountDown();

    }

    @SuppressLint("SetTextI18n")
    private void showNextQue() {

        checkAnswer();

        if (update_que_no < 10) {
            tv_noOfQues.setText(update_que_no + 1 + "/10");
            update_que_no++;
        }

        if (qIndex < questions.length) {

            tv_question.setText(questions[qIndex]);

            rb1.setText(opt[qIndex * 4]);
            rb2.setText(opt[qIndex * 4 + 1]);
            rb3.setText(opt[qIndex * 4 + 2]);
            rb4.setText(opt[qIndex * 4 + 3]);

        } else {
            score = correct;
            Intent in = new Intent(getApplicationContext(), Result_Activity.class);
            in.putExtra("isKey", true);
            startActivity(in);
            finish();
        }

        radio_g.clearCheck();

    }

    @SuppressLint("SetTextI18n")
    private void checkAnswer() {

        if (radio_g.getCheckedRadioButtonId() == -1) {
            skip++;
            timeOver_Dialog();
        }
        else {

            RadioButton checkedRadioButton = findViewById(radio_g.getCheckedRadioButtonId());
            String checkAnswer = checkedRadioButton.getText().toString();

            if (checkAnswer.equals(answers[qIndex])) {
                correct++;
                tv_score.setText("Score :-" + correct);
                correct_Dialog();
                countDownTimer.cancel();
            } else {
                wrong++;
                wrong_Dialog();
                countDownTimer.cancel();
            }
        }

        qIndex++;

    }

    private void startCountDown() {
//        String timeFormat = String.format(Locale.getDefault(), "Time : %02d", second);
//        int second = (int) (timeLeftInMilis / 1000) % 60;

        countDownTimer = new CountDownTimer(timeLeft_milliseconds, COUNT_DOWN_INTERVAL) {
            @Override
            public void onTick(long millisUntilFinished) {

                timeLeft_milliseconds = millisUntilFinished;

                int second = (int) TimeUnit.MILLISECONDS.toSeconds(timeLeft_milliseconds);

//              %02d  format the integer with 2 digit
                String timeFormat = String.format(Locale.getDefault(), "Time : %02d", second);

                tvTime.setText(timeFormat);

                if (timeLeft_milliseconds < 10000) {
                    tvTime.setTextColor(Color.RED);
                } else {
                    tvTime.setTextColor(default_color);
                }

            }

            @Override
            public void onFinish() {

                showNextQue();
//                timeLeftInMilis = 0;
//                updateCountDownTxt();
            }
        }.start();

    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        countDownTimer.cancel();
    }

    @Override
    public void onPause() {
        if (adView != null) {
            adView.pause();
        }
        super.onPause();
    }

    /**
     * Called when returning to the activity
     */
    @Override
    public void onResume() {
        super.onResume();
        if (adView != null) {
            adView.resume();
        }
    }

    /**
     * Called before the activity is destroyed
     */
    @Override
    public void onDestroy() {
        if (adView != null) {
            adView.destroy();
        }
        if (countDownTimer != null) {
            countDownTimer.cancel();
        }
        super.onDestroy();
    }

    @SuppressLint("MissingPermission")
    private void loadBanner() {
        adView = new AdView(this);
        adView.setAdUnitId(getResources().getString(R.string.Bannerid));
        adContainerView.removeAllViews();
        adContainerView.addView(adView);

        AdSize adSize = getAdSize();
        adView.setAdSize(adSize);

        AdRequest adRequest =
                new AdRequest.Builder().build();

        // Start loading the ad in the back_play.
        adView.loadAd(adRequest);
    }

    private AdSize getAdSize() {
        // Determine the screen width (less decorations) to use for the ad width.
        Display display = getWindowManager().getDefaultDisplay();
        DisplayMetrics outMetrics = new DisplayMetrics();
        display.getMetrics(outMetrics);

        float density = outMetrics.density;

        float adWidthPixels = adContainerView.getWidth();

        // If the ad hasn't been laid out, default to the full screen width.
        if (adWidthPixels == 0) {
            adWidthPixels = outMetrics.widthPixels;
        }

        int adWidth = (int) (adWidthPixels / density);

        return AdSize.getLandscapeAnchoredAdaptiveBannerAdSize(this, adWidth);
    }


    @SuppressLint("SetTextI18n")
    public void correct_Dialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(Play_Activity.this);
        View view = LayoutInflater.from(Play_Activity.this).inflate(R.layout.correct_dialoag, null);
        builder.setView(view);

        Button button = view.findViewById(R.id.correct_ok);
        TextView tvDialog_score = view.findViewById(R.id.tvDialog_score);

        final AlertDialog alertDialog = builder.create();


        tvDialog_score.setText("Score: " + correct);

        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                startCountDown();
                timeLeft_milliseconds = COUNT_DOWN_IN_MILLIS;
                alertDialog.dismiss();
            }
        });

        alertDialog.show();


    }

    public void wrong_Dialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(Play_Activity.this);
        View view;
        view = LayoutInflater.from(Play_Activity.this).inflate(R.layout.wrong_dialog, null);
        builder.setView(view);

        Button button = view.findViewById(R.id.wrong_ok);
        TextView tv_wrongDialog_correctAns = view.findViewById(R.id.tv_wrongDialog_correctAns);

        final AlertDialog alertDialog = builder.create();

        tv_wrongDialog_correctAns.setText("Correct Ans: " + answers[qIndex]);

        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                timeLeft_milliseconds = COUNT_DOWN_IN_MILLIS;
                startCountDown();
                alertDialog.dismiss();
            }
        });

        alertDialog.show();

    }

    public void timeOver_Dialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(Play_Activity.this);
        View view;
        view = LayoutInflater.from(Play_Activity.this).inflate(R.layout.time_over_dialog, null);
        builder.setView(view);

        Button button = view.findViewById(R.id.timeOver_ok);

        final AlertDialog alertDialog = builder.create();


        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                timeLeft_milliseconds = COUNT_DOWN_IN_MILLIS;
                startCountDown();
                alertDialog.dismiss();
            }
        });

        alertDialog.show();

    }
}
